{
 "components": {
  "rows": [
   {
    "id": "SCRIPT",
    "name": "Scripts",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "Group",
      "type": "Label",
      "value": "Scripts"
     }
    ],
    "type": "Label",
    "typeDesc": "<i>Group</i>"
   },
   {
    "id": "a2316c0d-b798-c33e-311c-b57ebb518d48",
    "parent": "SCRIPT",
    "properties": [
     {
      "name": "name",
      "type": "Id",
      "value": "Functions"
     },
     {
      "name": "javaScript",
      "type": "JavaScript",
      "value": "$(function () {\n    $(\".container\").addClass(\"container-fluid\").removeClass(\"container\");\n}); \n\nparam_filter = {\n    \"class\": \"org.pentaho.common.ui.metadata.model.impl.Condition\",\n    \"operator\": \"\",\n    \"category\": \"\",\n    \"column\": \"\",\n    \"columnName\": \"\",\n    \"value\": [],\n    \"comboType\": \"\"\n}; "
     }
    ],
    "rowName": "Function",
    "type": "ComponentsFunction",
    "typeDesc": "JavaScript function"
   },
   {
    "id": "SELECTORS",
    "name": "Selects",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "Group",
      "type": "Label",
      "value": "Selects"
     }
    ],
    "type": "Label",
    "typeDesc": "<i>Group</i>"
   },
   {
    "id": "2a73ffbf-48ad-5628-55d5-ae16b598ab48",
    "parent": "SELECTORS",
    "properties": [
     {
      "name": "name",
      "type": "Id",
      "value": "sel_category"
     },
     {
      "name": "parameter",
      "type": "Parameter",
      "value": "${p:param_selected_category}"
     },
     {
      "name": "listeners",
      "type": "Listeners",
      "value": "[\"${p:param_selected_domain_model}\"]"
     },
     {
      "name": "parameters",
      "type": "ValuesArray",
      "value": "[[\"param_selected_domain\",\"param_selected_domain\"],[\"param_selected_model\",\"param_selected_model\"]]"
     },
     {
      "name": "externalPlugin",
      "type": "externalPluginCustom",
      "value": "select2"
     },
     {
      "name": "valueAsId",
      "type": "Boolean",
      "value": "false"
     },
     {
      "name": "dataSource",
      "type": "Datasource",
      "value": "get_categories"
     },
     {
      "name": "valuesArray",
      "type": "ValuesArray",
      "value": "[]"
     },
     {
      "name": "priority",
      "type": "Integer",
      "value": "4"
     },
     {
      "name": "refreshPeriod",
      "type": "Integer",
      "value": ""
     },
     {
      "name": "htmlObject",
      "type": "HtmlObject",
      "value": "${h:div_filter_category}"
     },
     {
      "name": "executeAtStart",
      "type": "Boolean",
      "value": "true"
     },
     {
      "name": "preExecution",
      "type": "JavaScript",
      "value": "function setModelAndDomainFilter() {\n    param_selected_domain_model = localStorage.getItem('param_selected_domain_model');\n    param_selected_domain = param_selected_domain_model.split('|')[0].replace(/[\"]/g, \"\");\n    param_selected_model = param_selected_domain_model.split('|')[1].replace(/[\"]/g, \"\");\n} "
     },
     {
      "name": "postExecution",
      "type": "JavaScript",
      "value": ""
     },
     {
      "name": "postFetch",
      "type": "JavaScript",
      "value": ""
     },
     {
      "name": "preChange",
      "type": "JavaScript",
      "value": ""
     },
     {
      "name": "postChange",
      "type": "JavaScript",
      "value": ""
     },
     {
      "name": "extraOptions",
      "type": "ExtraOptionsArray",
      "value": "[]"
     },
     {
      "name": "tooltip",
      "type": "Html",
      "value": ""
     }
    ],
    "rowName": "Select Component",
    "type": "ComponentsSelect",
    "typeDesc": "Select Component"
   },
   {
    "id": "e9eb9755-5f84-a84d-5401-dea37722c24b",
    "parent": "SELECTORS",
    "properties": [
     {
      "name": "name",
      "type": "Id",
      "value": "sel_filter_on"
     },
     {
      "name": "parameter",
      "type": "Parameter",
      "value": "${p:param_selected_column}"
     },
     {
      "name": "listeners",
      "type": "Listeners",
      "value": "[\"${p:param_selected_category}\",\"${p:param_selected_domain_model}\"]"
     },
     {
      "name": "parameters",
      "type": "ValuesArray",
      "value": "[[\"param_selected_category\",\"param_selected_category\"],[\"param_selected_domain\",\"param_selected_domain\"],[\"param_selected_model\",\"param_selected_model\"]]"
     },
     {
      "name": "externalPlugin",
      "type": "externalPluginCustom",
      "value": "select2"
     },
     {
      "name": "valueAsId",
      "type": "Boolean",
      "value": "false"
     },
     {
      "name": "dataSource",
      "type": "Datasource",
      "value": "get_columns"
     },
     {
      "name": "valuesArray",
      "type": "ValuesArray",
      "value": "[]"
     },
     {
      "name": "priority",
      "type": "Integer",
      "value": 5
     },
     {
      "name": "refreshPeriod",
      "type": "Integer",
      "value": ""
     },
     {
      "name": "htmlObject",
      "type": "HtmlObject",
      "value": "${h:div_filter_on}"
     },
     {
      "name": "executeAtStart",
      "type": "Boolean",
      "value": "true"
     },
     {
      "name": "preExecution",
      "type": "JavaScript",
      "value": ""
     },
     {
      "name": "postExecution",
      "type": "JavaScript",
      "value": ""
     },
     {
      "name": "postFetch",
      "type": "JavaScript",
      "value": ""
     },
     {
      "name": "preChange",
      "type": "JavaScript",
      "value": ""
     },
     {
      "name": "postChange",
      "type": "JavaScript",
      "value": ""
     },
     {
      "name": "extraOptions",
      "type": "ExtraOptionsArray",
      "value": "[]"
     },
     {
      "name": "tooltip",
      "type": "Html",
      "value": ""
     }
    ],
    "rowName": "Select Component",
    "type": "ComponentsSelect",
    "typeDesc": "Select Component"
   },
   {
    "id": "0a53ecc7-9407-a44c-31f8-8d412d3a510d",
    "parent": "SELECTORS",
    "properties": [
     {
      "name": "name",
      "type": "Id",
      "value": "sel_establish_filter_type"
     },
     {
      "name": "parameter",
      "type": "Parameter",
      "value": "${p:param_establish_filter_type}"
     },
     {
      "name": "listeners",
      "type": "Listeners",
      "value": "[]"
     },
     {
      "name": "parameters",
      "type": "ValuesArray",
      "value": "[]"
     },
     {
      "name": "externalPlugin",
      "type": "externalPluginCustom",
      "value": "select2"
     },
     {
      "name": "valueAsId",
      "type": "Boolean",
      "value": "false"
     },
     {
      "name": "dataSource",
      "type": "Datasource",
      "value": ""
     },
     {
      "name": "valuesArray",
      "type": "ValuesArray",
      "value": "[[\"=\",\"=\"],[\">\",\">\"],[\">=\",\">=\"],[\"<\",\"<\"],[\"<=\",\"<=\"],[\"EXACTLY MATCHES\",\"EXACTLY MATCHES\"],[\"CONTAINS\",\"CONTAINS\"],[\"DOES NOT CONTAIN\",\"DOES NOT CONTAIN\"],[\"BEGINS WITH\",\"BEGINS WITH\"],[\"ENDS WITH\",\"ENDS WITH\"],[\"IS NULL\",\"IS NULL\"],[\"IS NOT NULL\",\"IS NOT NULL\"]]"
     },
     {
      "name": "priority",
      "type": "Integer",
      "value": 5
     },
     {
      "name": "refreshPeriod",
      "type": "Integer",
      "value": ""
     },
     {
      "name": "htmlObject",
      "type": "HtmlObject",
      "value": "${h:div_sel_establish_filter}"
     },
     {
      "name": "executeAtStart",
      "type": "Boolean",
      "value": "true"
     },
     {
      "name": "preExecution",
      "type": "JavaScript",
      "value": ""
     },
     {
      "name": "postExecution",
      "type": "JavaScript",
      "value": ""
     },
     {
      "name": "postFetch",
      "type": "JavaScript",
      "value": ""
     },
     {
      "name": "preChange",
      "type": "JavaScript",
      "value": ""
     },
     {
      "name": "postChange",
      "type": "JavaScript",
      "value": ""
     },
     {
      "name": "extraOptions",
      "type": "ExtraOptionsArray",
      "value": "[]"
     },
     {
      "name": "tooltip",
      "type": "Html",
      "value": ""
     }
    ],
    "rowName": "Select Component",
    "type": "ComponentsSelect",
    "typeDesc": "Select Component"
   },
   {
    "id": "125680bb-5a65-8c76-cedd-131d82845af2",
    "parent": "SELECTORS",
    "properties": [
     {
      "name": "name",
      "type": "Id",
      "value": "sel_filter_type"
     },
     {
      "name": "parameter",
      "type": "Parameter",
      "value": "${p:param_filter_type}"
     },
     {
      "name": "listeners",
      "type": "Listeners",
      "value": "[]"
     },
     {
      "name": "parameters",
      "type": "ValuesArray",
      "value": "[]"
     },
     {
      "name": "externalPlugin",
      "type": "externalPluginCustom",
      "value": "select2"
     },
     {
      "name": "valueAsId",
      "type": "Boolean",
      "value": "true"
     },
     {
      "name": "dataSource",
      "type": "Datasource",
      "value": ""
     },
     {
      "name": "valuesArray",
      "type": "ValuesArray",
      "value": "[[\"AND\",\"AND\"],[\"OR\",\"OR\"],[\"AND_NOT\",\"AND_NOT\"],[\"OR_NOT\",\"OR_NOT\"]]"
     },
     {
      "name": "priority",
      "type": "Integer",
      "value": 5
     },
     {
      "name": "refreshPeriod",
      "type": "Integer",
      "value": ""
     },
     {
      "name": "htmlObject",
      "type": "HtmlObject",
      "value": "${h:div_sel_filter_type}"
     },
     {
      "name": "executeAtStart",
      "type": "Boolean",
      "value": "true"
     },
     {
      "name": "preExecution",
      "type": "JavaScript",
      "value": ""
     },
     {
      "name": "postExecution",
      "type": "JavaScript",
      "value": "function removeSearch() {\n    $(\".select2-search\").remove();\n} "
     },
     {
      "name": "postFetch",
      "type": "JavaScript",
      "value": ""
     },
     {
      "name": "preChange",
      "type": "JavaScript",
      "value": ""
     },
     {
      "name": "postChange",
      "type": "JavaScript",
      "value": ""
     },
     {
      "name": "extraOptions",
      "type": "ExtraOptionsArray",
      "value": "[]"
     },
     {
      "name": "tooltip",
      "type": "Html",
      "value": ""
     }
    ],
    "rowName": "Select Component",
    "type": "ComponentsSelect",
    "typeDesc": "Select Component"
   },
   {
    "id": "a7baf37a-b17b-e3be-fa39-7320cd14763c",
    "parent": "SELECTORS",
    "properties": [
     {
      "name": "name",
      "type": "Id",
      "value": "sel_established_options"
     },
     {
      "name": "parameter",
      "type": "Parameter",
      "value": "${p:param_options}"
     },
     {
      "name": "listeners",
      "type": "Listeners",
      "value": "[\"${p:param_query_model}\"]"
     },
     {
      "name": "parameters",
      "type": "ValuesArray",
      "value": "[[\"param_query_model\",\"param_query_model\"]]"
     },
     {
      "name": "externalPlugin",
      "type": "externalPluginCustom",
      "value": ""
     },
     {
      "name": "valueAsId",
      "type": "Boolean",
      "value": "false"
     },
     {
      "name": "dataSource",
      "type": "Datasource",
      "value": "run_query"
     },
     {
      "name": "valuesArray",
      "type": "ValuesArray",
      "value": "[]"
     },
     {
      "name": "priority",
      "type": "Integer",
      "value": 5
     },
     {
      "name": "refreshPeriod",
      "type": "Integer",
      "value": ""
     },
     {
      "name": "size",
      "type": "Integer",
      "value": ""
     },
     {
      "name": "htmlObject",
      "type": "HtmlObject",
      "value": "${h:div_sel_options}"
     },
     {
      "name": "executeAtStart",
      "type": "Boolean",
      "value": "false"
     },
     {
      "name": "preExecution",
      "type": "JavaScript",
      "value": "function () {\n    param_query_model = \"\";\n    param_selected_domain_model = param_selected_domain_model.toString().replace(/[|]/g, \",\").replace(/[\"]/g, \"\");\n    param_query_model = param_selected_domain_model + \",\" + param_selected_category + \",fi,\" + param_selected_column;\n} "
     },
     {
      "name": "postExecution",
      "type": "JavaScript",
      "value": "function () {\n    multisel_option();\n} "
     },
     {
      "name": "postFetch",
      "type": "JavaScript",
      "value": ""
     },
     {
      "name": "preChange",
      "type": "JavaScript",
      "value": ""
     },
     {
      "name": "postChange",
      "type": "JavaScript",
      "value": ""
     },
     {
      "name": "tooltip",
      "type": "Html",
      "value": ""
     }
    ],
    "rowName": "SelectMulti Component",
    "type": "ComponentsSelectMulti",
    "typeDesc": "Multiple Select Component"
   },
   {
    "id": "617de61d-da56-c662-ca4c-49ed69bd34d2",
    "parent": "SELECTORS",
    "properties": [
     {
      "name": "name",
      "type": "Id",
      "value": "txt_input_select"
     },
     {
      "name": "parameter",
      "type": "Parameter",
      "value": "${p:param_txt_input}"
     },
     {
      "name": "listeners",
      "type": "Listeners",
      "value": "[\"${p:param_establish_filter_type}\"]"
     },
     {
      "name": "maxLength",
      "type": "Integer",
      "value": ""
     },
     {
      "name": "priority",
      "type": "Integer",
      "value": 5
     },
     {
      "name": "refreshPeriod",
      "type": "Integer",
      "value": ""
     },
     {
      "name": "size",
      "type": "Integer",
      "value": ""
     },
     {
      "name": "htmlObject",
      "type": "HtmlObject",
      "value": "${h:div_input_text}"
     },
     {
      "name": "executeAtStart",
      "type": "Boolean",
      "value": "true"
     },
     {
      "name": "preExecution",
      "type": "JavaScript",
      "value": ""
     },
     {
      "name": "postExecution",
      "type": "JavaScript",
      "value": ""
     },
     {
      "name": "preChange",
      "type": "JavaScript",
      "value": ""
     },
     {
      "name": "postChange",
      "type": "JavaScript",
      "value": ""
     },
     {
      "name": "tooltip",
      "type": "Html",
      "value": ""
     }
    ],
    "rowName": "TextInput Component",
    "type": "ComponentstextInput",
    "typeDesc": "Text input Component"
   },
   {
    "id": "OTHERCOMPONENTS",
    "name": "Others",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "Group",
      "type": "Label",
      "value": "Others"
     }
    ],
    "type": "Label",
    "typeDesc": "<i>Group</i>"
   },
   {
    "id": "a22532de-ec61-4187-8971-8c27eebdc6a1",
    "parent": "OTHERCOMPONENTS",
    "properties": [
     {
      "name": "name",
      "type": "Id",
      "value": "btn_get_options"
     },
     {
      "name": "label",
      "type": "String",
      "value": "Get Options"
     },
     {
      "name": "listeners",
      "type": "Listeners",
      "value": "[]"
     },
     {
      "name": "actionParameters",
      "type": "ValuesArray",
      "value": "[]"
     },
     {
      "name": "expression",
      "type": "JavaScript",
      "value": "function show_options() {\n    if (this.label == \"Get Options\") {\n        $(\"#div_input_text\").hide();\n        $(\"#div_sel_options\").show();\n        $(\"#div_sel_options div.btn-group\").removeClass('btn-group');\n        $(\"#div_sel_options div\").addClass('btn-group open'); \n        this.label = \"Get Input\";\n        Dashboards.fireChange('param_query_model', param_options);\n        $(\"#div_get_options button\").text(\"Get Input\");\n    } else if (this.label == \"Get Input\") {\n        param_options = \"\";\n        this.label = \"Get Options\";\n        $(\"#div_input_text\").show();\n        $(\"#div_sel_options\").hide();\n        $(\"#div_get_options button\").text(\"Get Options\");\n    }\n} "
     },
     {
      "name": "failureCallback",
      "type": "JavaScript",
      "value": ""
     },
     {
      "name": "successCallback",
      "type": "JavaScript",
      "value": ""
     },
     {
      "name": "dataSource",
      "type": "Datasource",
      "value": ""
     },
     {
      "name": "priority",
      "type": "Integer",
      "value": 5
     },
     {
      "name": "refreshPeriod",
      "type": "Integer",
      "value": ""
     },
     {
      "name": "buttonStyle",
      "type": "TableStyle",
      "value": "bootstrap"
     },
     {
      "name": "htmlObject",
      "type": "HtmlObject",
      "value": "${h:div_get_options}"
     },
     {
      "name": "executeAtStart",
      "type": "Boolean",
      "value": "true"
     },
     {
      "name": "preExecution",
      "type": "JavaScript",
      "value": ""
     },
     {
      "name": "postExecution",
      "type": "JavaScript",
      "value": "function () {\n    $(\"#div_get_options button\").addClass(\"btn\").addClass(\"btn-default\");\n} "
     },
     {
      "name": "tooltip",
      "type": "Html",
      "value": ""
     }
    ],
    "rowName": "Button Component",
    "type": "ComponentsbuttonComponent",
    "typeDesc": "Button Component"
   },
   {
    "id": "4a96f7d7-2d13-5699-284d-24535a361096",
    "parent": "OTHERCOMPONENTS",
    "properties": [
     {
      "name": "name",
      "type": "Id",
      "value": "btn_confirm_filter"
     },
     {
      "name": "label",
      "type": "String",
      "value": "Confirm Filter"
     },
     {
      "name": "listeners",
      "type": "Listeners",
      "value": "[\"${p:param_establish_filter_type}\",\"${p:param_txt_input}\",\"${p:param_options}\",\"${p:param_filter_type}\",\"${p:param_filter}\"]"
     },
     {
      "name": "actionParameters",
      "type": "ValuesArray",
      "value": "[]"
     },
     {
      "name": "expression",
      "type": "JavaScript",
      "value": "function setFilterQuery() {\n    var query = [];\n    if (param_establish_filter_type === \"\") {\n        alert('Please specify a filter');\n    } else if ((param_options.length === 0) && (param_txt_input === \"\")) {\n        alert('Please specify a value for the filter');\n    } else if (param_filter_type === \"\") {\n        alert('Please specify a filter type');\n    } else {\n        if (param_options.length > 0) {\n            for (var i = 0; i < param_options.length; i++) {\n                query[i] = param_options[i];\n            }\n        } else if (param_txt_input.length > 0) {\n            query[0] = param_txt_input;\n        } else {\n            query[0] = '%';\n        }\n        param_filter.category = param_selected_category;\n        param_filter.column = param_selected_column.split(',')[0];\n        param_filter.columnName = param_selected_column.split(',')[1];\n        param_filter.operator = param_establish_filter_type.toString();\n        param_filter.comboType = param_filter_type.toString();\n        param_filter.value = query;\n    }\n    parent.param_filter_on_query.push(param_filter);\n    parent.Dashboards.fireChange('param_filter_on_query', parent.param_filter_on_query);\n    parent.$.fancybox.close();\n} "
     },
     {
      "name": "failureCallback",
      "type": "JavaScript",
      "value": ""
     },
     {
      "name": "successCallback",
      "type": "JavaScript",
      "value": ""
     },
     {
      "name": "dataSource",
      "type": "Datasource",
      "value": ""
     },
     {
      "name": "priority",
      "type": "Integer",
      "value": 5
     },
     {
      "name": "refreshPeriod",
      "type": "Integer",
      "value": ""
     },
     {
      "name": "buttonStyle",
      "type": "TableStyle",
      "value": "bootstrap"
     },
     {
      "name": "htmlObject",
      "type": "HtmlObject",
      "value": "${h:div_confirm_filter}"
     },
     {
      "name": "executeAtStart",
      "type": "Boolean",
      "value": "true"
     },
     {
      "name": "preExecution",
      "type": "JavaScript",
      "value": ""
     },
     {
      "name": "postExecution",
      "type": "JavaScript",
      "value": "function () {\n    $(\"#div_confirm_filter button\").addClass(\"btn\").addClass(\"btn-default\");\n} "
     },
     {
      "name": "tooltip",
      "type": "Html",
      "value": ""
     }
    ],
    "rowName": "Button Component",
    "type": "ComponentsbuttonComponent",
    "typeDesc": "Button Component"
   },
   {
    "id": "GENERIC",
    "name": "Generic",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "Group",
      "type": "Label",
      "value": "Generic"
     }
    ],
    "type": "Label",
    "typeDesc": "<i>Group</i>"
   },
   {
    "id": "4088d7ff-6579-167a-5eb8-fd09e7545bff",
    "parent": "GENERIC",
    "properties": [
     {
      "name": "name",
      "type": "Id",
      "value": "param_selected_domain_model"
     },
     {
      "name": "propertyValue",
      "type": "String",
      "value": ""
     },
     {
      "name": "parameterViewRole",
      "type": "parameterViewRoleCustom",
      "value": "unused"
     },
     {
      "name": "bookmarkable",
      "type": "Boolean",
      "value": "false"
     },
     {
      "name": "public",
      "type": "Boolean",
      "value": "false"
     }
    ],
    "rowName": "Simple Parameter",
    "type": "ComponentsParameter",
    "typeDesc": "Simple parameter"
   },
   {
    "id": "3b18055e-9966-9abf-00c3-f2c87abf2f05",
    "parent": "GENERIC",
    "properties": [
     {
      "name": "name",
      "type": "Id",
      "value": "param_selected_domain"
     },
     {
      "name": "propertyValue",
      "type": "String",
      "value": ""
     },
     {
      "name": "parameterViewRole",
      "type": "parameterViewRoleCustom",
      "value": "unused"
     },
     {
      "name": "bookmarkable",
      "type": "Boolean",
      "value": "false"
     },
     {
      "name": "public",
      "type": "Boolean",
      "value": "false"
     }
    ],
    "rowName": "Simple Parameter",
    "type": "ComponentsParameter",
    "typeDesc": "Simple parameter"
   },
   {
    "id": "49799092-e30f-27d6-e5e6-5302f443a7d4",
    "parent": "GENERIC",
    "properties": [
     {
      "name": "name",
      "type": "Id",
      "value": "param_selected_model"
     },
     {
      "name": "propertyValue",
      "type": "String",
      "value": ""
     },
     {
      "name": "parameterViewRole",
      "type": "parameterViewRoleCustom",
      "value": "unused"
     },
     {
      "name": "bookmarkable",
      "type": "Boolean",
      "value": "false"
     },
     {
      "name": "public",
      "type": "Boolean",
      "value": "false"
     }
    ],
    "rowName": "Simple Parameter",
    "type": "ComponentsParameter",
    "typeDesc": "Simple parameter"
   },
   {
    "id": "60dec84a-d710-73cd-bef4-4960e89f7710",
    "parent": "GENERIC",
    "properties": [
     {
      "name": "name",
      "type": "Id",
      "value": "param_selected_category"
     },
     {
      "name": "propertyValue",
      "type": "String",
      "value": ""
     },
     {
      "name": "parameterViewRole",
      "type": "parameterViewRoleCustom",
      "value": "unused"
     },
     {
      "name": "bookmarkable",
      "type": "Boolean",
      "value": "false"
     },
     {
      "name": "public",
      "type": "Boolean",
      "value": "false"
     }
    ],
    "rowName": "Simple Parameter",
    "type": "ComponentsParameter",
    "typeDesc": "Simple parameter"
   },
   {
    "id": "486d5ebc-a864-6fea-4f8f-9fae0433aac1",
    "parent": "GENERIC",
    "properties": [
     {
      "name": "name",
      "type": "Id",
      "value": "param_selected_column"
     },
     {
      "name": "propertyValue",
      "type": "String",
      "value": ""
     },
     {
      "name": "parameterViewRole",
      "type": "parameterViewRoleCustom",
      "value": "unused"
     },
     {
      "name": "bookmarkable",
      "type": "Boolean",
      "value": "false"
     },
     {
      "name": "public",
      "type": "Boolean",
      "value": "false"
     }
    ],
    "rowName": "Simple Parameter",
    "type": "ComponentsParameter",
    "typeDesc": "Simple parameter"
   },
   {
    "id": "79d5a51a-a38a-07db-e4f5-ec80f686c4ee",
    "parent": "GENERIC",
    "properties": [
     {
      "name": "name",
      "type": "Id",
      "value": "param_establish_filter_type"
     },
     {
      "name": "propertyValue",
      "type": "String",
      "value": ""
     },
     {
      "name": "parameterViewRole",
      "type": "parameterViewRoleCustom",
      "value": "unused"
     },
     {
      "name": "bookmarkable",
      "type": "Boolean",
      "value": "false"
     },
     {
      "name": "public",
      "type": "Boolean",
      "value": "false"
     }
    ],
    "rowName": "Simple Parameter",
    "type": "ComponentsParameter",
    "typeDesc": "Simple parameter"
   },
   {
    "id": "27314250-8d62-2aa3-2c4a-7eaca822a9e1",
    "parent": "GENERIC",
    "properties": [
     {
      "name": "name",
      "type": "Id",
      "value": "param_txt_input"
     },
     {
      "name": "propertyValue",
      "type": "String",
      "value": ""
     },
     {
      "name": "parameterViewRole",
      "type": "parameterViewRoleCustom",
      "value": "unused"
     },
     {
      "name": "bookmarkable",
      "type": "Boolean",
      "value": "false"
     },
     {
      "name": "public",
      "type": "Boolean",
      "value": "false"
     }
    ],
    "rowName": "Simple Parameter",
    "type": "ComponentsParameter",
    "typeDesc": "Simple parameter"
   },
   {
    "id": "a3ab326d-c364-1fce-ed0b-450688db0b8f",
    "parent": "GENERIC",
    "properties": [
     {
      "name": "name",
      "type": "Id",
      "value": "param_options"
     },
     {
      "name": "propertyValue",
      "type": "String",
      "value": ""
     },
     {
      "name": "parameterViewRole",
      "type": "parameterViewRoleCustom",
      "value": "unused"
     },
     {
      "name": "bookmarkable",
      "type": "Boolean",
      "value": "false"
     },
     {
      "name": "public",
      "type": "Boolean",
      "value": "false"
     }
    ],
    "rowName": "Simple Parameter",
    "type": "ComponentsParameter",
    "typeDesc": "Simple parameter"
   },
   {
    "id": "47b3d8cb-50e6-f2da-a0b8-a287bda48b48",
    "parent": "GENERIC",
    "properties": [
     {
      "name": "name",
      "type": "Id",
      "value": "param_query_model"
     },
     {
      "name": "propertyValue",
      "type": "String",
      "value": ""
     },
     {
      "name": "parameterViewRole",
      "type": "parameterViewRoleCustom",
      "value": "unused"
     },
     {
      "name": "bookmarkable",
      "type": "Boolean",
      "value": "false"
     },
     {
      "name": "public",
      "type": "Boolean",
      "value": "false"
     }
    ],
    "rowName": "Simple Parameter",
    "type": "ComponentsParameter",
    "typeDesc": "Simple parameter"
   },
   {
    "id": "ab159a62-9593-c9f1-c798-12f21c1af659",
    "parent": "GENERIC",
    "properties": [
     {
      "name": "name",
      "type": "Id",
      "value": "param_filter_type"
     },
     {
      "name": "propertyValue",
      "type": "String",
      "value": ""
     },
     {
      "name": "parameterViewRole",
      "type": "parameterViewRoleCustom",
      "value": "unused"
     },
     {
      "name": "bookmarkable",
      "type": "Boolean",
      "value": "false"
     },
     {
      "name": "public",
      "type": "Boolean",
      "value": "false"
     }
    ],
    "rowName": "Simple Parameter",
    "type": "ComponentsParameter",
    "typeDesc": "Simple parameter"
   },
   {
    "id": "c70ca3ac-cac8-8689-ad53-866b75f73d94",
    "parent": "GENERIC",
    "properties": [
     {
      "name": "name",
      "type": "Id",
      "value": "param_filter"
     },
     {
      "name": "propertyValue",
      "type": "String",
      "value": ""
     },
     {
      "name": "parameterViewRole",
      "type": "parameterViewRoleCustom",
      "value": "unused"
     },
     {
      "name": "bookmarkable",
      "type": "Boolean",
      "value": "false"
     },
     {
      "name": "public",
      "type": "Boolean",
      "value": "false"
     }
    ],
    "rowName": "Simple Parameter",
    "type": "ComponentsParameter",
    "typeDesc": "Simple parameter"
   }
  ]
 },
 "datasources": {
  "rows": [
   {
    "id": "WAQE_CPKENDPOINTS",
    "name": "WAQE Endpoints",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "Group",
      "type": "Label",
      "value": "WAQE Endpoints"
     }
    ],
    "type": "Label",
    "typeDesc": "<i>Group</i>"
   },
   {
    "id": "0267bd87-3abf-19a8-2649-39e09c5e2d1d",
    "meta": "CPK",
    "meta_endpoint": "getMetadataCategoriesSelect",
    "meta_pluginId": "waqe",
    "parent": "WAQE_CPKENDPOINTS",
    "properties": [
     {
      "name": "name",
      "type": "Id",
      "value": "get_categories"
     },
     {
      "name": "stepName",
      "type": "String",
      "value": "OUTPUT"
     },
     {
      "name": "kettleOutput",
      "type": "kettleOutputCustom",
      "value": "Inferred"
     }
    ],
    "rowName": "getMetadataCategoriesSelect Endpoint",
    "type": "Componentswaqe_getMetadataCategoriesSelect_CPKENDPOINT",
    "typeDesc": "getMetadataCategoriesSelect Endpoint"
   },
   {
    "id": "2665adda-9458-a669-024e-3119d07db793",
    "meta": "CPK",
    "meta_endpoint": "getMetadataCategoriesColumnsSelect",
    "meta_pluginId": "waqe",
    "parent": "WAQE_CPKENDPOINTS",
    "properties": [
     {
      "name": "name",
      "type": "Id",
      "value": "get_columns"
     },
     {
      "name": "stepName",
      "type": "String",
      "value": "OUTPUT"
     },
     {
      "name": "kettleOutput",
      "type": "kettleOutputCustom",
      "value": "Inferred"
     }
    ],
    "rowName": "getMetadataCategoriesColumnsSelect Endpoint",
    "type": "Componentswaqe_getMetadataCategoriesColumnsSelect_CPKENDPOINT",
    "typeDesc": "getMetadataCategoriesColumnsSelect Endpoint"
   },
   {
    "id": "b8df8ab1-7a00-17d3-312a-c1c537faf01e",
    "meta": "CPK",
    "meta_endpoint": "runQuery",
    "meta_pluginId": "waqe",
    "parent": "WAQE_CPKENDPOINTS",
    "properties": [
     {
      "name": "name",
      "type": "Id",
      "value": "run_query"
     },
     {
      "name": "stepName",
      "type": "String",
      "value": "OUTPUT"
     },
     {
      "name": "kettleOutput",
      "type": "kettleOutputCustom",
      "value": "Inferred"
     }
    ],
    "rowName": "runQuery Endpoint",
    "type": "Componentswaqe_runQuery_CPKENDPOINT",
    "typeDesc": "runQuery Endpoint"
   }
  ]
 },
 "filename": "/system/waqe/dashboards/filter.cdfde",
 "layout": {
  "rows": [
   {
    "id": "f34e14c2-a138-4951-72b3-744fe4838c69",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "name",
      "type": "Id",
      "value": "js"
     },
     {
      "name": "resourceCode",
      "type": "Resource",
      "value": "function multisel_option() {\n    $('#div_sel_options select').multiselect({\n        enableClickableOptGroups: true,\n        enableCollapsibleOptGroups: true,\n        nonSelectedText: 'Choose  a value!',\n        enableFiltering: true,\n        includeSelectAllOption: true,\n        maxHeight: 200,\n        buttonWidth: 100,\n        enableCaseInsensitiveFiltering: true,\n        numberDisplayed: 1,\n        //nSelectedText: '- ' + selectors_names.option,\n        //nonSelectedText: selectors_names.option,\n        //allSelectedText: selectors_names.option\n\n    });\n    //enableDeselectAll('div_sel_options');\n} "
     },
     {
      "name": "resourceType",
      "type": "Label",
      "value": "Javascript"
     }
    ],
    "type": "LayoutResourceCode",
    "typeDesc": "Resource"
   },
   {
    "id": "df2dd78c-b7ff-de5b-1daf-e97880991360",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "name",
      "type": "Id",
      "value": "boostrapMultiselectcss"
     },
     {
      "name": "resourceCode",
      "type": "Resource",
      "value": "span.multiselect-native-select {\n    position: relative\n}\n\nspan.multiselect-native-select select {\n    border: 0!important;\n    clip: rect(0 0 0 0)!important;\n    height: 1px!important;\n    margin: -1px -1px -1px -3px!important;\n    overflow: hidden!important;\n    padding: 0!important;\n    position: absolute!important;\n    width: 1px!important;\n    left: 50%;\n    top: 30px\n}\n\n.multiselect-container {\n    position: absolute;\n    list-style-type: none;\n    margin: 0;\n    padding: 0\n}\n\n.multiselect-container .input-group {\n    margin: 5px\n}\n\n.multiselect-container>li {\n    padding: 0\n}\n\n.multiselect-container>li>a.multiselect-all label {\n    font-weight: 700\n}\n\n.multiselect-container>li.multiselect-group label {\n    margin: 0;\n    padding: 3px 20px 3px 20px;\n    height: 100%;\n    font-weight: 700\n}\n\n.multiselect-container>li.multiselect-group-clickable label {\n    cursor: pointer\n}\n\n.multiselect-container>li>a {\n    padding: 0\n}\n\n.multiselect-container>li>a>label {\n    margin: 0;\n    height: 100%;\n    cursor: pointer;\n    font-weight: 400;\n    padding: 3px 20px 3px 40px\n}\n\n.multiselect-container>li>a>label.radio,\n.multiselect-container>li>a>label.checkbox {\n    margin: 0\n}\n\n.multiselect-container>li>a>label>input[type=checkbox] {\n    margin-bottom: 5px\n}\n\n.btn-group>.btn-group:nth-child(2)>.multiselect.btn {\n    border-top-left-radius: 4px;\n    border-bottom-left-radius: 4px\n}\n\n.form-inline .multiselect-container label.checkbox,\n.form-inline .multiselect-container label.radio {\n    padding: 3px 20px 3px 40px\n}\n\n.form-inline .multiselect-container li a label.checkbox input[type=checkbox],\n.form-inline .multiselect-container li a label.radio input[type=radio] {\n    margin-left: -20px;\n    margin-right: 0\n} "
     },
     {
      "name": "resourceType",
      "type": "Label",
      "value": "Css"
     }
    ],
    "type": "LayoutResourceCode",
    "typeDesc": "Resource"
   },
   {
    "id": "5b1df130-4940-8963-757e-3e989ed0e3d3",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "name",
      "type": "Id",
      "value": "boostrapMultiselectjs"
     },
     {
      "name": "resourceCode",
      "type": "Resource",
      "value": "/**\n * Bootstrap Multiselect (https://github.com/davidstutz/bootstrap-multiselect)\n * \n * Apache License, Version 2.0:\n * Copyright (c) 2012 - 2015 David Stutz\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a\n * copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations\n * under the License.\n * \n * BSD 3-Clause License:\n * Copyright (c) 2012 - 2015 David Stutz\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *    - Redistributions of source code must retain the above copyright notice,\n *      this list of conditions and the following disclaimer.\n *    - Redistributions in binary form must reproduce the above copyright notice,\n *      this list of conditions and the following disclaimer in the documentation\n *      and/or other materials provided with the distribution.\n *    - Neither the name of David Stutz nor the names of its contributors may be\n *      used to endorse or promote products derived from this software without\n *      specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\n * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;\n * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\n * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n!function ($) {\n    \"use strict\";// jshint ;_;\n\n    if (typeof ko !== 'undefined' && ko.bindingHandlers && !ko.bindingHandlers.multiselect) {\n        ko.bindingHandlers.multiselect = {\n            after: ['options', 'value', 'selectedOptions', 'enable', 'disable'],\n\n            init: function(element, valueAccessor, allBindings, viewModel, bindingContext) {\n                var $element = $(element);\n                var config = ko.toJS(valueAccessor());\n\n                $element.multiselect(config);\n\n                if (allBindings.has('options')) {\n                    var options = allBindings.get('options');\n                    if (ko.isObservable(options)) {\n                        ko.computed({\n                            read: function() {\n                                options();\n                                setTimeout(function() {\n                                    var ms = $element.data('multiselect');\n                                    if (ms)\n                                        ms.updateOriginalOptions();//Not sure how beneficial this is.\n                                    $element.multiselect('rebuild');\n                                }, 1);\n                            },\n                            disposeWhenNodeIsRemoved: element\n                        });\n                    }\n                }\n\n                //value and selectedOptions are two-way, so these will be triggered even by our own actions.\n                //It needs some way to tell if they are triggered because of us or because of outside change.\n                //It doesn't loop but it's a waste of processing.\n                if (allBindings.has('value')) {\n                    var value = allBindings.get('value');\n                    if (ko.isObservable(value)) {\n                        ko.computed({\n                            read: function() {\n                                value();\n                                setTimeout(function() {\n                                    $element.multiselect('refresh');\n                                }, 1);\n                            },\n                            disposeWhenNodeIsRemoved: element\n                        }).extend({ rateLimit: 100, notifyWhenChangesStop: true });\n                    }\n                }\n\n                //Switched from arrayChange subscription to general subscription using 'refresh'.\n                //Not sure performance is any better using 'select' and 'deselect'.\n                if (allBindings.has('selectedOptions')) {\n                    var selectedOptions = allBindings.get('selectedOptions');\n                    if (ko.isObservable(selectedOptions)) {\n                        ko.computed({\n                            read: function() {\n                                selectedOptions();\n                                setTimeout(function() {\n                                    $element.multiselect('refresh');\n                                }, 1);\n                            },\n                            disposeWhenNodeIsRemoved: element\n                        }).extend({ rateLimit: 100, notifyWhenChangesStop: true });\n                    }\n                }\n\n                var setEnabled = function (enable) {\n                    setTimeout(function () {\n                        if (enable)\n                            $element.multiselect('enable');\n                        else\n                            $element.multiselect('disable');\n                    });\n                };\n\n                if (allBindings.has('enable')) {\n                    var enable = allBindings.get('enable');\n                    if (ko.isObservable(enable)) {\n                        ko.computed({\n                            read: function () {\n                                setEnabled(enable());\n                            },\n                            disposeWhenNodeIsRemoved: element\n                        }).extend({ rateLimit: 100, notifyWhenChangesStop: true });\n                    } else {\n                        setEnabled(enable);\n                    }\n                }\n\n                if (allBindings.has('disable')) {\n                    var disable = allBindings.get('disable');\n                    if (ko.isObservable(disable)) {\n                        ko.computed({\n                            read: function () {\n                                setEnabled(!disable());\n                            },\n                            disposeWhenNodeIsRemoved: element\n                        }).extend({ rateLimit: 100, notifyWhenChangesStop: true });\n                    } else {\n                        setEnabled(!disable);\n                    }\n                }\n\n                ko.utils.domNodeDisposal.addDisposeCallback(element, function() {\n                    $element.multiselect('destroy');\n                });\n            },\n\n            update: function(element, valueAccessor, allBindings, viewModel, bindingContext) {\n                var $element = $(element);\n                var config = ko.toJS(valueAccessor());\n\n                $element.multiselect('setOptions', config);\n                $element.multiselect('rebuild');\n            }\n        };\n    }\n\n    function forEach(array, callback) {\n        for (var index = 0; index < array.length; ++index) {\n            callback(array[index], index);\n        }\n    }\n\n    /**\n     * Constructor to create a new multiselect using the given select.\n     *\n     * @param {jQuery} select\n     * @param {Object} options\n     * @returns {Multiselect}\n     */\n    function Multiselect(select, options) {\n\n        this.$select = $(select);\n        \n        // Placeholder via data attributes\n        if (this.$select.attr(\"data-placeholder\")) {\n            options.nonSelectedText = this.$select.data(\"placeholder\");\n        }\n        \n        this.options = this.mergeOptions($.extend({}, options, this.$select.data()));\n\n        // Initialization.\n        // We have to clone to create a new reference.\n        this.originalOptions = this.$select.clone()[0].options;\n        this.query = '';\n        this.searchTimeout = null;\n        this.lastToggledInput = null;\n\n        this.options.multiple = this.$select.attr('multiple') === \"multiple\";\n        this.options.onChange = $.proxy(this.options.onChange, this);\n        this.options.onSelectAll = $.proxy(this.options.onSelectAll, this);\n        this.options.onDeselectAll = $.proxy(this.options.onDeselectAll, this);\n        this.options.onDropdownShow = $.proxy(this.options.onDropdownShow, this);\n        this.options.onDropdownHide = $.proxy(this.options.onDropdownHide, this);\n        this.options.onDropdownShown = $.proxy(this.options.onDropdownShown, this);\n        this.options.onDropdownHidden = $.proxy(this.options.onDropdownHidden, this);\n        this.options.onInitialized = $.proxy(this.options.onInitialized, this);\n        \n        // Build select all if enabled.\n        this.buildContainer();\n        this.buildButton();\n        this.buildDropdown();\n        this.buildSelectAll();\n        this.buildDropdownOptions();\n        this.buildFilter();\n\n        this.updateButtonText();\n        this.updateSelectAll(true);\n        \n        if (this.options.enableClickableOptGroups && this.options.multiple) {\n            this.updateOptGroups();\n        }\n        \n        if (this.options.disableIfEmpty && $('option', this.$select).length <= 0) {\n            this.disable();\n        }\n\n        this.$select.wrap('<span class=\"hide-native-select\">').after(this.$container);\n        this.options.onInitialized(this.$select, this.$container);\n    }\n\n    Multiselect.prototype = {\n\n        defaults: {\n            /**\n             * Default text function will either print 'None selected' in case no\n             * option is selected or a list of the selected options up to a length\n             * of 3 selected options.\n             * \n             * @param {jQuery} options\n             * @param {jQuery} selectF\n             * @returns {String}\n             */\n            buttonText: function(options, select) {\n                if (this.disabledText.length > 0\n                        && (select.prop('disabled') || (options.length == 0 && this.disableIfEmpty)))  {\n                    \n                    return this.disabledText;\n                }\n                else if (options.length === 0) {\n                    return this.nonSelectedText;\n                }\n                else if (this.allSelectedText \n                        && options.length === $('option', $(select)).length \n                        && $('option', $(select)).length !== 1 \n                        && this.multiple) {\n\n                    if (this.selectAllNumber) {\n                        return this.allSelectedText + ' (' + options.length + ')';\n                    }\n                    else {\n                        return this.allSelectedText;\n                    }\n                }\n                else if (options.length > this.numberDisplayed) {\n                    return options.length + ' ' + this.nSelectedText;\n                }\n                else {\n                    var selected = '';\n                    var delimiter = this.delimiterText;\n                    \n                    options.each(function() {\n                        var label = ($(this).attr('label') !== undefined) ? $(this).attr('label') : $(this).text();\n                        selected += label + delimiter;\n                    });\n                    \n                    return selected.substr(0, selected.length - this.delimiterText.length);\n                }\n            },\n            /**\n             * Updates the title of the button similar to the buttonText function.\n             * \n             * @param {jQuery} options\n             * @param {jQuery} select\n             * @returns {@exp;selected@call;substr}\n             */\n            buttonTitle: function(options, select) {\n                if (options.length === 0) {\n                    return this.nonSelectedText;\n                }\n                else {\n                    var selected = '';\n                    var delimiter = this.delimiterText;\n                    \n                    options.each(function () {\n                        var label = ($(this).attr('label') !== undefined) ? $(this).attr('label') : $(this).text();\n                        selected += label + delimiter;\n                    });\n                    return selected.substr(0, selected.length - this.delimiterText.length);\n                }\n            },\n            checkboxName: function(option) {\n                return false; // no checkbox name\n            },\n            /**\n             * Create a label.\n             *\n             * @param {jQuery} element\n             * @returns {String}\n             */\n            optionLabel: function(element){\n                return $(element).attr('label') || $(element).text();\n            },\n            /**\n             * Create a class.\n             *\n             * @param {jQuery} element\n             * @returns {String}\n             */\n            optionClass: function(element) {\n                return $(element).attr('class') || '';\n            },\n            /**\n             * Triggered on change of the multiselect.\n             * \n             * Not triggered when selecting/deselecting options manually.\n             * \n             * @param {jQuery} option\n             * @param {Boolean} checked\n             */\n            onChange : function(option, checked) {\n\n            },\n            /**\n             * Triggered when the dropdown is shown.\n             *\n             * @param {jQuery} event\n             */\n            onDropdownShow: function(event) {\n\n            },\n            /**\n             * Triggered when the dropdown is hidden.\n             *\n             * @param {jQuery} event\n             */\n            onDropdownHide: function(event) {\n\n            },\n            /**\n             * Triggered after the dropdown is shown.\n             * \n             * @param {jQuery} event\n             */\n            onDropdownShown: function(event) {\n                \n            },\n            /**\n             * Triggered after the dropdown is hidden.\n             * \n             * @param {jQuery} event\n             */\n            onDropdownHidden: function(event) {\n                \n            },\n            /**\n             * Triggered on select all.\n             */\n            onSelectAll: function() {\n                \n            },\n            /**\n             * Triggered on deselect all.\n             */\n            onDeselectAll: function() {\n                \n            },\n            /**\n             * Triggered after initializing.\n             *\n             * @param {jQuery} $select\n             * @param {jQuery} $container\n             */\n            onInitialized: function($select, $container) {\n\n            },\n            enableHTML: false,\n            buttonClass: 'btn btn-default',\n            inheritClass: false,\n            buttonWidth: 'auto',\n            buttonContainer: '<div class=\"btn-group\" />',\n            dropRight: false,\n            dropUp: false,\n            selectedClass: 'active',\n            // Maximum height of the dropdown menu.\n            // If maximum height is exceeded a scrollbar will be displayed.\n            maxHeight: false,\n            includeSelectAllOption: false,\n            includeSelectAllIfMoreThan: 0,\n            selectAllText: ' Select all',\n            selectAllValue: 'multiselect-all',\n            selectAllName: false,\n            selectAllNumber: true,\n            selectAllJustVisible: true,\n            enableFiltering: false,\n            enableCaseInsensitiveFiltering: false,\n            enableFullValueFiltering: false,\n            enableClickableOptGroups: false,\n            enableCollapsibleOptGroups: false,\n            filterPlaceholder: 'Search',\n            // possible options: 'text', 'value', 'both'\n            filterBehavior: 'text',\n            includeFilterClearBtn: true,\n            preventInputChangeEvent: false,\n            nonSelectedText: 'None selected',\n            nSelectedText: 'selected',\n            allSelectedText: 'All selected',\n            numberDisplayed: 1,\n            disableIfEmpty: false,\n            disabledText: '',\n            delimiterText: ', ',\n            templates: {\n                button: '<button type=\"button\" class=\"multiselect dropdown-toggle\" data-toggle=\"dropdown\"><span class=\"multiselect-selected-text\"></span> <b class=\"caret\"></b></button>',\n                ul: '<ul class=\"multiselect-container dropdown-menu\"></ul>',\n                filter: '<li class=\"multiselect-item multiselect-filter\"><div class=\"input-group\"><span class=\"input-group-addon\"><i class=\"glyphicon glyphicon-search\"></i></span><input class=\"form-control multiselect-search\" type=\"text\"></div></li>',\n                filterClearBtn: '<span class=\"input-group-btn\"><button class=\"btn btn-default multiselect-clear-filter\" type=\"button\"><i class=\"glyphicon glyphicon-remove-circle\"></i></button></span>',\n                li: '<li><a tabindex=\"0\"><label></label></a></li>',\n                divider: '<li class=\"multiselect-item divider\"></li>',\n                liGroup: '<li class=\"multiselect-item multiselect-group\"><label></label></li>'\n            }\n        },\n\n        constructor: Multiselect,\n\n        /**\n         * Builds the container of the multiselect.\n         */\n        buildContainer: function() {\n            this.$container = $(this.options.buttonContainer);\n            this.$container.on('show.bs.dropdown', this.options.onDropdownShow);\n            this.$container.on('hide.bs.dropdown', this.options.onDropdownHide);\n            this.$container.on('shown.bs.dropdown', this.options.onDropdownShown);\n            this.$container.on('hidden.bs.dropdown', this.options.onDropdownHidden);\n        },\n\n        /**\n         * Builds the button of the multiselect.\n         */\n        buildButton: function() {\n            this.$button = $(this.options.templates.button).addClass(this.options.buttonClass);\n            if (this.$select.attr('class') && this.options.inheritClass) {\n                this.$button.addClass(this.$select.attr('class'));\n            }\n            // Adopt active state.\n            if (this.$select.prop('disabled')) {\n                this.disable();\n            }\n            else {\n                this.enable();\n            }\n\n            // Manually add button width if set.\n            if (this.options.buttonWidth && this.options.buttonWidth !== 'auto') {\n                this.$button.css({\n                    'width' : '100%', //this.options.buttonWidth,\n                    'overflow' : 'hidden',\n                    'text-overflow' : 'ellipsis'\n                });\n                this.$container.css({\n                    'width': this.options.buttonWidth\n                });\n            }\n\n            // Keep the tab index from the select.\n            var tabindex = this.$select.attr('tabindex');\n            if (tabindex) {\n                this.$button.attr('tabindex', tabindex);\n            }\n\n            this.$container.prepend(this.$button);\n        },\n\n        /**\n         * Builds the ul representing the dropdown menu.\n         */\n        buildDropdown: function() {\n\n            // Build ul.\n            this.$ul = $(this.options.templates.ul);\n\n            if (this.options.dropRight) {\n                this.$ul.addClass('pull-right');\n            }\n\n            // Set max height of dropdown menu to activate auto scrollbar.\n            if (this.options.maxHeight) {\n                // TODO: Add a class for this option to move the css declarations.\n                this.$ul.css({\n                    'max-height': this.options.maxHeight + 'px',\n                    'overflow-y': 'auto',\n                    'overflow-x': 'hidden'\n                });\n            }\n            \n            if (this.options.dropUp) {\n                \n                var height = Math.min(this.options.maxHeight, $('option[data-role!=\"divider\"]', this.$select).length*26 + $('option[data-role=\"divider\"]', this.$select).length*19 + (this.options.includeSelectAllOption ? 26 : 0) + (this.options.enableFiltering || this.options.enableCaseInsensitiveFiltering ? 44 : 0));\n                var moveCalc = height + 34;\n                \n                this.$ul.css({\n                    'max-height': height + 'px',\n                    'overflow-y': 'auto',\n                    'overflow-x': 'hidden',\n                    'margin-top': \"-\" + moveCalc + 'px'\n                });\n            }\n            \n            this.$container.append(this.$ul);\n        },\n\n        /**\n         * Build the dropdown options and binds all necessary events.\n         * \n         * Uses createDivider and createOptionValue to create the necessary options.\n         */\n        buildDropdownOptions: function() {\n\n            this.$select.children().each($.proxy(function(index, element) {\n\n                var $element = $(element);\n                // Support optgroups and options without a group simultaneously.\n                var tag = $element.prop('tagName')\n                    .toLowerCase();\n            \n                if ($element.prop('value') === this.options.selectAllValue) {\n                    return;\n                }\n\n                if (tag === 'optgroup') {\n                    this.createOptgroup(element);\n                }\n                else if (tag === 'option') {\n\n                    if ($element.data('role') === 'divider') {\n                        this.createDivider();\n                    }\n                    else {\n                        this.createOptionValue(element);\n                    }\n\n                }\n\n                // Other illegal tags will be ignored.\n            }, this));\n\n            // Bind the change event on the dropdown elements.\n            $('li:not(.multiselect-group) input', this.$ul).on('change', $.proxy(function(event) {\n                var $target = $(event.target);\n\n                var checked = $target.prop('checked') || false;\n                var isSelectAllOption = $target.val() === this.options.selectAllValue;\n\n                // Apply or unapply the configured selected class.\n                if (this.options.selectedClass) {\n                    if (checked) {\n                        $target.closest('li')\n                            .addClass(this.options.selectedClass);\n                    }\n                    else {\n                        $target.closest('li')\n                            .removeClass(this.options.selectedClass);\n                    }\n                }\n\n                // Get the corresponding option.\n                var value = $target.val();\n                var $option = this.getOptionByValue(value);\n\n                var $optionsNotThis = $('option', this.$select).not($option);\n                var $checkboxesNotThis = $('input', this.$container).not($target);\n\n                if (isSelectAllOption) {\n                    \n                    if (checked) {\n                        this.selectAll(this.options.selectAllJustVisible);\n                    }\n                    else {\n                        this.deselectAll(this.options.selectAllJustVisible);\n                    }\n                }\n                else {\n                    if (checked) {\n                        $option.prop('selected', true);\n\n                        if (this.options.multiple) {\n                            // Simply select additional option.\n                            $option.prop('selected', true);\n                        }\n                        else {\n                            // Unselect all other options and corresponding checkboxes.\n                            if (this.options.selectedClass) {\n                                $($checkboxesNotThis).closest('li').removeClass(this.options.selectedClass);\n                            }\n\n                            $($checkboxesNotThis).prop('checked', false);\n                            $optionsNotThis.prop('selected', false);\n\n                            // It's a single selection, so close.\n                            this.$button.click();\n                        }\n\n                        if (this.options.selectedClass === \"active\") {\n                            $optionsNotThis.closest(\"a\").css(\"outline\", \"\");\n                        }\n                    }\n                    else {\n                        // Unselect option.\n                        $option.prop('selected', false);\n                    }\n                    \n                    // To prevent select all from firing onChange: #575\n                    this.options.onChange($option, checked);\n                    \n                    // Do not update select all or optgroups on select all change!\n                    this.updateSelectAll();\n                \n                    if (this.options.enableClickableOptGroups && this.options.multiple) {\n                        this.updateOptGroups();\n                    }\n                }\n\n                this.$select.change();\n                this.updateButtonText();\n                \n                if(this.options.preventInputChangeEvent) {\n                    return false;\n                }\n            }, this));\n\n            $('li a', this.$ul).on('mousedown', function(e) {\n                if (e.shiftKey) {\n                    // Prevent selecting text by Shift+click\n                    return false;\n                }\n            });\n        \n            $('li a', this.$ul).on('touchstart click', $.proxy(function(event) {\n                event.stopPropagation();\n\n                var $target = $(event.target);\n                \n                if (event.shiftKey && this.options.multiple) {\n                    if($target.is(\"label\")){ // Handles checkbox selection manually (see https://github.com/davidstutz/bootstrap-multiselect/issues/431)\n                        event.preventDefault();\n                        $target = $target.find(\"input\");\n                        $target.prop(\"checked\", !$target.prop(\"checked\"));\n                    }\n                    var checked = $target.prop('checked') || false;\n\n                    if (this.lastToggledInput !== null && this.lastToggledInput !== $target) { // Make sure we actually have a range\n                        var from = $target.closest(\"li\").index();\n                        var to = this.lastToggledInput.closest(\"li\").index();\n                        \n                        if (from > to) { // Swap the indices\n                            var tmp = to;\n                            to = from;\n                            from = tmp;\n                        }\n                        \n                        // Make sure we grab all elements since slice excludes the last index\n                        ++to;\n                        \n                        // Change the checkboxes and underlying options\n                        var range = this.$ul.find(\"li\").slice(from, to).find(\"input\");\n                        \n                        range.prop('checked', checked);\n                        \n                        if (this.options.selectedClass) {\n                            range.closest('li')\n                                .toggleClass(this.options.selectedClass, checked);\n                        }\n                        \n                        for (var i = 0, j = range.length; i < j; i++) {\n                            var $checkbox = $(range[i]);\n\n                            var $option = this.getOptionByValue($checkbox.val());\n\n                            $option.prop('selected', checked);\n                        }                   \n                    }\n                    \n                    // Trigger the select \"change\" event\n                    $target.trigger(\"change\");\n                }\n                \n                // Remembers last clicked option\n                if($target.is(\"input\") && !$target.closest(\"li\").is(\".multiselect-item\")){\n                    this.lastToggledInput = $target;\n                }\n\n                $target.blur();\n            }, this));\n\n            // Keyboard support.\n            this.$container.off('keydown.multiselect').on('keydown.multiselect', $.proxy(function(event) {\n                if ($('input[type=\"text\"]', this.$container).is(':focus')) {\n                    return;\n                }\n\n                if (event.keyCode === 9 && this.$container.hasClass('open')) {\n                    this.$button.click();\n                }\n                else {\n                    var $items = $(this.$container).find(\"li:not(.divider):not(.disabled) a\").filter(\":visible\");\n\n                    if (!$items.length) {\n                        return;\n                    }\n\n                    var index = $items.index($items.filter(':focus'));\n\n                    // Navigation up.\n                    if (event.keyCode === 38 && index > 0) {\n                        index--;\n                    }\n                    // Navigate down.\n                    else if (event.keyCode === 40 && index < $items.length - 1) {\n                        index++;\n                    }\n                    else if (!~index) {\n                        index = 0;\n                    }\n\n                    var $current = $items.eq(index);\n                    $current.focus();\n\n                    if (event.keyCode === 32 || event.keyCode === 13) {\n                        var $checkbox = $current.find('input');\n\n                        $checkbox.prop(\"checked\", !$checkbox.prop(\"checked\"));\n                        $checkbox.change();\n                    }\n\n                    event.stopPropagation();\n                    event.preventDefault();\n                }\n            }, this));\n            \n            if (this.options.enableClickableOptGroups && this.options.multiple) {\n                $(\"li.multiselect-group input\", this.$ul).on(\"change\", $.proxy(function(event) {\n                    event.stopPropagation();\n                    \n                    var $target = $(event.target);\n                    var checked = $target.prop('checked') || false;\n                    \n                    var $li = $(event.target).closest('li');\n                    var $group = $li.nextUntil(\"li.multiselect-group\")\n                        .not('.multiselect-filter-hidden')\n                        .not('.disabled');\n                    \n                    var $inputs = $group.find(\"input\");\n                    \n                    var values = [];\n                    var $options = [];\n                    \n                    $.each($inputs, $.proxy(function(index, input) {\n                        var value = $(input).val();\n                        var $option = this.getOptionByValue(value);\n                        \n                        if (checked) {\n                            $(input).prop('checked', true);\n                            $(input).closest('li')\n                                .addClass(this.options.selectedClass);\n                        \n                            $option.prop('selected', true);\n                        }\n                        else {\n                            $(input).prop('checked', false);\n                            $(input).closest('li')\n                                .removeClass(this.options.selectedClass);\n                        \n                            $option.prop('selected', false);\n                        }\n                        \n                        $options.push(this.getOptionByValue(value));\n                    }, this))\n                    \n                    // Cannot use select or deselect here because it would call updateOptGroups again.\n                    \n                    this.options.onChange($options, checked);\n                    \n                    this.updateButtonText();\n                    this.updateSelectAll();\n                }, this));\n            }\n            \n            if (this.options.enableCollapsibleOptGroups && this.options.multiple) {                \n                $(\"li.multiselect-group .caret-container\", this.$ul).on(\"click\", $.proxy(function(event) {\n                    var $li = $(event.target).closest('li');\n                    var $inputs = $li.nextUntil(\"li.multiselect-group\")\n                            .not('.multiselect-filter-hidden');\n                    \n                    var visible = true;\n                    $inputs.each(function() {\n                        visible = visible && $(this).is(':visible');\n                    });\n                    \n                    if (visible) {\n                        $inputs.hide()\n                            .addClass('multiselect-collapsible-hidden');\n                    }\n                    else {\n                        $inputs.show()\n                            .removeClass('multiselect-collapsible-hidden');\n                    }\n                }, this));\n                \n                $(\"li.multiselect-all\", this.$ul).css('background', '#f3f3f3').css('border-bottom', '1px solid #eaeaea');\n                $(\"li.multiselect-all > a > label.checkbox\", this.$ul).css('padding', '3px 20px 3px 35px');\n                $(\"li.multiselect-group > a > input\", this.$ul).css('margin', '4px 0px 5px -20px');\n            }\n        },\n\n        /**\n         * Create an option using the given select option.\n         *\n         * @param {jQuery} element\n         */\n        createOptionValue: function(element) {\n            var $element = $(element);\n            if ($element.is(':selected')) {\n                $element.prop('selected', true);\n            }\n\n            // Support the label attribute on options.\n            var label = this.options.optionLabel(element);\n            var classes = this.options.optionClass(element);\n            var value = $element.val();\n            var inputType = this.options.multiple ? \"checkbox\" : \"radio\";\n\n            var $li = $(this.options.templates.li);\n            var $label = $('label', $li);\n            $label.addClass(inputType);\n            $li.addClass(classes);\n\n            if (this.options.enableHTML) {\n                $label.html(\" \" + label);\n            }\n            else {\n                $label.text(\" \" + label);\n            }\n        \n            var $checkbox = $('<input/>').attr('type', inputType);\n            \n            var name = this.options.checkboxName($element);\n            if (name) {\n                $checkbox.attr('name', name);\n            }\n            \n            $label.prepend($checkbox);\n\n            var selected = $element.prop('selected') || false;\n            $checkbox.val(value);\n\n            if (value === this.options.selectAllValue) {\n                $li.addClass(\"multiselect-item multiselect-all\");\n                $checkbox.parent().parent()\n                    .addClass('multiselect-all');\n            }\n\n            $label.attr('title', $element.attr('title'));\n\n            this.$ul.append($li);\n\n            if ($element.is(':disabled')) {\n                $checkbox.attr('disabled', 'disabled')\n                    .prop('disabled', true)\n                    .closest('a')\n                    .attr(\"tabindex\", \"-1\")\n                    .closest('li')\n                    .addClass('disabled');\n            }\n\n            $checkbox.prop('checked', selected);\n\n            if (selected && this.options.selectedClass) {\n                $checkbox.closest('li')\n                    .addClass(this.options.selectedClass);\n            }\n        },\n\n        /**\n         * Creates a divider using the given select option.\n         *\n         * @param {jQuery} element\n         */\n        createDivider: function(element) {\n            var $divider = $(this.options.templates.divider);\n            this.$ul.append($divider);\n        },\n\n        /**\n         * Creates an optgroup.\n         *\n         * @param {jQuery} group\n         */\n        createOptgroup: function(group) {            \n            var label = $(group).attr(\"label\");\n            var value = $(group).attr(\"value\");\n            var $li = $('<li class=\"multiselect-item multiselect-group\"><a href=\"javascript:void(0);\"><label><b></b></label></a></li>');\n            \n            var classes = this.options.optionClass(group);\n            $li.addClass(classes);\n            \n            if (this.options.enableHTML) {\n                $('label b', $li).html(\" \" + label);\n            }\n            else {\n                $('label b', $li).text(\" \" + label);\n            }\n            \n            if (this.options.enableCollapsibleOptGroups && this.options.multiple) {\n                $('a', $li).append('<span class=\"caret-container\"><b class=\"caret\"></b></span>');\n            }\n            \n            if (this.options.enableClickableOptGroups && this.options.multiple) {\n                $('a label', $li).prepend('<input type=\"checkbox\" value=\"' + value + '\"/>');\n            }\n            \n            if ($(group).is(':disabled')) {\n                $li.addClass('disabled');\n            }\n            \n            this.$ul.append($li);\n            \n            $(\"option\", group).each($.proxy(function($, group) {\n                this.createOptionValue(group);\n            }, this))\n        },\n\n        /**\n         * Build the select all.\n         * \n         * Checks if a select all has already been created.\n         */\n        buildSelectAll: function() {\n            if (typeof this.options.selectAllValue === 'number') {\n                this.options.selectAllValue = this.options.selectAllValue.toString();\n            }\n            \n            var alreadyHasSelectAll = this.hasSelectAll();\n\n            if (!alreadyHasSelectAll && this.options.includeSelectAllOption && this.options.multiple\n                    && $('option', this.$select).length > this.options.includeSelectAllIfMoreThan) {\n\n                // Check whether to add a divider after the select all.\n                if (this.options.includeSelectAllDivider) {\n                    this.$ul.prepend($(this.options.templates.divider));\n                }\n\n                var $li = $(this.options.templates.li);\n                $('label', $li).addClass(\"checkbox\");\n                \n                if (this.options.enableHTML) {\n                    $('label', $li).html(\" \" + this.options.selectAllText);\n                }\n                else {\n                    $('label', $li).text(\" \" + this.options.selectAllText);\n                }\n                \n                if (this.options.selectAllName) {\n                    $('label', $li).prepend('<input type=\"checkbox\" name=\"' + this.options.selectAllName + '\" />');\n                }\n                else {\n                    $('label', $li).prepend('<input type=\"checkbox\" />');\n                }\n                \n                var $checkbox = $('input', $li);\n                $checkbox.val(this.options.selectAllValue);\n\n                $li.addClass(\"multiselect-item multiselect-all\");\n                $checkbox.parent().parent()\n                    .addClass('multiselect-all');\n\n                this.$ul.prepend($li);\n\n                $checkbox.prop('checked', false);\n            }\n        },\n\n        /**\n         * Builds the filter.\n         */\n        buildFilter: function() {\n\n            // Build filter if filtering OR case insensitive filtering is enabled and the number of options exceeds (or equals) enableFilterLength.\n            if (this.options.enableFiltering || this.options.enableCaseInsensitiveFiltering) {\n                var enableFilterLength = Math.max(this.options.enableFiltering, this.options.enableCaseInsensitiveFiltering);\n\n                if (this.$select.find('option').length >= enableFilterLength) {\n\n                    this.$filter = $(this.options.templates.filter);\n                    $('input', this.$filter).attr('placeholder', this.options.filterPlaceholder);\n                    \n                    // Adds optional filter clear button\n                    if(this.options.includeFilterClearBtn) {\n                        var clearBtn = $(this.options.templates.filterClearBtn);\n                        clearBtn.on('click', $.proxy(function(event){\n                            clearTimeout(this.searchTimeout);\n                            \n                            this.$filter.find('.multiselect-search').val('');\n                            $('li', this.$ul).show().removeClass('multiselect-filter-hidden');\n                            \n                            this.updateSelectAll();\n                            \n                            if (this.options.enableClickableOptGroups && this.options.multiple) {\n                                this.updateOptGroups();\n                            }\n                            \n                        }, this));\n                        this.$filter.find('.input-group').append(clearBtn);\n                    }\n                    \n                    this.$ul.prepend(this.$filter);\n\n                    this.$filter.val(this.query).on('click', function(event) {\n                        event.stopPropagation();\n                    }).on('input keydown', $.proxy(function(event) {\n                        // Cancel enter key default behaviour\n                        if (event.which === 13) {\n                          event.preventDefault();\n                        }\n                        \n                        // This is useful to catch \"keydown\" events after the browser has updated the control.\n                        clearTimeout(this.searchTimeout);\n\n                        this.searchTimeout = this.asyncFunction($.proxy(function() {\n\n                            if (this.query !== event.target.value) {\n                                this.query = event.target.value;\n\n                                var currentGroup, currentGroupVisible;\n                                $.each($('li', this.$ul), $.proxy(function(index, element) {\n                                    var value = $('input', element).length > 0 ? $('input', element).val() : \"\";\n                                    var text = $('label', element).text();\n\n                                    var filterCandidate = '';\n                                    if ((this.options.filterBehavior === 'text')) {\n                                        filterCandidate = text;\n                                    }\n                                    else if ((this.options.filterBehavior === 'value')) {\n                                        filterCandidate = value;\n                                    }\n                                    else if (this.options.filterBehavior === 'both') {\n                                        filterCandidate = text + '\\n' + value;\n                                    }\n\n                                    if (value !== this.options.selectAllValue && text) {\n\n                                        // By default lets assume that element is not\n                                        // interesting for this search.\n                                        var showElement = false;\n\n                                        if (this.options.enableCaseInsensitiveFiltering) {\n                                            filterCandidate = filterCandidate.toLowerCase();\n                                            this.query = this.query.toLowerCase();\n                                        }\n\n                                        if (this.options.enableFullValueFiltering && this.options.filterBehavior !== 'both') {\n                                            var valueToMatch = filterCandidate.trim().substring(0, this.query.length);\n                                            if (this.query.indexOf(valueToMatch) > -1) {\n                                                showElement = true;\n                                            }\n                                        }\n                                        else if (filterCandidate.indexOf(this.query) > -1) {\n                                            showElement = true;\n                                        }\n\n                                        // Toggle current element (group or group item) according to showElement boolean.\n                                        $(element).toggle(showElement)\n                                            .toggleClass('multiselect-filter-hidden', !showElement);\n                                        \n                                        // Differentiate groups and group items.\n                                        if ($(element).hasClass('multiselect-group')) {\n                                            // Remember group status.\n                                            currentGroup = element;\n                                            currentGroupVisible = showElement;\n                                        }\n                                        else {\n                                            // Show group name when at least one of its items is visible.\n                                            if (showElement) {\n                                                $(currentGroup).show()\n                                                    .removeClass('multiselect-filter-hidden');\n                                            }\n                                            \n                                            // Show all group items when group name satisfies filter.\n                                            if (!showElement && currentGroupVisible) {\n                                                $(element).show()\n                                                    .removeClass('multiselect-filter-hidden');\n                                            }\n                                        }\n                                    }\n                                }, this));\n                            }\n\n                            this.updateSelectAll();\n                            \n                            if (this.options.enableClickableOptGroups && this.options.multiple) {\n                                this.updateOptGroups();\n                            }\n                        }, this), 300, this);\n                    }, this));\n                }\n            }\n        },\n\n        /**\n         * Unbinds the whole plugin.\n         */\n        destroy: function() {\n            this.$container.remove();\n            this.$select.show();\n            this.$select.data('multiselect', null);\n        },\n\n        /**\n         * Refreshs the multiselect based on the selected options of the select.\n         */\n        refresh: function () {\n            var inputs = $.map($('li input', this.$ul), $);\n            \n            $('option', this.$select).each($.proxy(function (index, element) {\n                var $elem = $(element);\n                var value = $elem.val();\n                var $input;\n                for (var i = inputs.length; 0 < i--; /**/) {\n                    if (value !== ($input = inputs[i]).val())\n                        continue; // wrong li\n\n                    if ($elem.is(':selected')) {\n                        $input.prop('checked', true);\n\n                        if (this.options.selectedClass) {\n                            $input.closest('li')\n                                .addClass(this.options.selectedClass);\n                        }\n                    }\n                    else {\n                        $input.prop('checked', false);\n\n                        if (this.options.selectedClass) {\n                            $input.closest('li')\n                                .removeClass(this.options.selectedClass);\n                        }\n                    }\n\n                    if ($elem.is(\":disabled\")) {\n                        $input.attr('disabled', 'disabled')\n                            .prop('disabled', true)\n                            .closest('li')\n                            .addClass('disabled');\n                    }\n                    else {\n                        $input.prop('disabled', false)\n                            .closest('li')\n                            .removeClass('disabled');\n                    }\n                    break; // assumes unique values\n                }\n            }, this));\n\n            this.updateButtonText();\n            this.updateSelectAll();\n            \n            if (this.options.enableClickableOptGroups && this.options.multiple) {\n                this.updateOptGroups();\n            }\n        },\n\n        /**\n         * Select all options of the given values.\n         * \n         * If triggerOnChange is set to true, the on change event is triggered if\n         * and only if one value is passed.\n         * \n         * @param {Array} selectValues\n         * @param {Boolean} triggerOnChange\n         */\n        select: function(selectValues, triggerOnChange) {\n            if(!$.isArray(selectValues)) {\n                selectValues = [selectValues];\n            }\n\n            for (var i = 0; i < selectValues.length; i++) {\n                var value = selectValues[i];\n\n                if (value === null || value === undefined) {\n                    continue;\n                }\n\n                var $option = this.getOptionByValue(value);\n                var $checkbox = this.getInputByValue(value);\n\n                if($option === undefined || $checkbox === undefined) {\n                    continue;\n                }\n                \n                if (!this.options.multiple) {\n                    this.deselectAll(false);\n                }\n                \n                if (this.options.selectedClass) {\n                    $checkbox.closest('li')\n                        .addClass(this.options.selectedClass);\n                }\n\n                $checkbox.prop('checked', true);\n                $option.prop('selected', true);\n                \n                if (triggerOnChange) {\n                    this.options.onChange($option, true);\n                }\n            }\n\n            this.updateButtonText();\n            this.updateSelectAll();\n            \n            if (this.options.enableClickableOptGroups && this.options.multiple) {\n                this.updateOptGroups();\n            }\n        },\n\n        /**\n         * Clears all selected items.\n         */\n        clearSelection: function () {\n            this.deselectAll(false);\n            this.updateButtonText();\n            this.updateSelectAll();\n            \n            if (this.options.enableClickableOptGroups && this.options.multiple) {\n                this.updateOptGroups();\n            }\n        },\n\n        /**\n         * Deselects all options of the given values.\n         * \n         * If triggerOnChange is set to true, the on change event is triggered, if\n         * and only if one value is passed.\n         * \n         * @param {Array} deselectValues\n         * @param {Boolean} triggerOnChange\n         */\n        deselect: function(deselectValues, triggerOnChange) {\n            if(!$.isArray(deselectValues)) {\n                deselectValues = [deselectValues];\n            }\n\n            for (var i = 0; i < deselectValues.length; i++) {\n                var value = deselectValues[i];\n\n                if (value === null || value === undefined) {\n                    continue;\n                }\n\n                var $option = this.getOptionByValue(value);\n                var $checkbox = this.getInputByValue(value);\n\n                if($option === undefined || $checkbox === undefined) {\n                    continue;\n                }\n\n                if (this.options.selectedClass) {\n                    $checkbox.closest('li')\n                        .removeClass(this.options.selectedClass);\n                }\n\n                $checkbox.prop('checked', false);\n                $option.prop('selected', false);\n                \n                if (triggerOnChange) {\n                    this.options.onChange($option, false);\n                }\n            }\n\n            this.updateButtonText();\n            this.updateSelectAll();\n            \n            if (this.options.enableClickableOptGroups && this.options.multiple) {\n                this.updateOptGroups();\n            }\n        },\n        \n        /**\n         * Selects all enabled & visible options.\n         *\n         * If justVisible is true or not specified, only visible options are selected.\n         *\n         * @param {Boolean} justVisible\n         * @param {Boolean} triggerOnSelectAll\n         */\n        selectAll: function (justVisible, triggerOnSelectAll) {\n            \n            var justVisible = typeof justVisible === 'undefined' ? true : justVisible;\n            var allLis = $(\"li:not(.divider):not(.disabled):not(.multiselect-group)\", this.$ul);\n            var visibleLis = $(\"li:not(.divider):not(.disabled):not(.multiselect-group):not(.multiselect-filter-hidden):not(.multiselect-collapisble-hidden)\", this.$ul).filter(':visible');\n            \n            if(justVisible) {\n                $('input:enabled' , visibleLis).prop('checked', true);\n                visibleLis.addClass(this.options.selectedClass);\n                \n                $('input:enabled' , visibleLis).each($.proxy(function(index, element) {\n                    var value = $(element).val();\n                    var option = this.getOptionByValue(value);\n                    $(option).prop('selected', true);\n                }, this));\n            }\n            else {\n                $('input:enabled' , allLis).prop('checked', true);\n                allLis.addClass(this.options.selectedClass);\n                \n                $('input:enabled' , allLis).each($.proxy(function(index, element) {\n                    var value = $(element).val();\n                    var option = this.getOptionByValue(value);\n                    $(option).prop('selected', true);\n                }, this));\n            }\n            \n            $('li input[value=\"' + this.options.selectAllValue + '\"]').prop('checked', true);\n            \n            if (this.options.enableClickableOptGroups && this.options.multiple) {\n                this.updateOptGroups();\n            }\n            \n            if (triggerOnSelectAll) {\n                this.options.onSelectAll();\n            }\n        },\n\n        /**\n         * Deselects all options.\n         * \n         * If justVisible is true or not specified, only visible options are deselected.\n         * \n         * @param {Boolean} justVisible\n         */\n        deselectAll: function (justVisible, triggerOnDeselectAll) {\n            \n            var justVisible = typeof justVisible === 'undefined' ? true : justVisible;\n            var allLis = $(\"li:not(.divider):not(.disabled):not(.multiselect-group)\", this.$ul);\n            var visibleLis = $(\"li:not(.divider):not(.disabled):not(.multiselect-group):not(.multiselect-filter-hidden):not(.multiselect-collapisble-hidden)\", this.$ul).filter(':visible');\n            \n            if(justVisible) {\n                $('input[type=\"checkbox\"]:enabled' , visibleLis).prop('checked', false);\n                visibleLis.removeClass(this.options.selectedClass);\n                \n                $('input[type=\"checkbox\"]:enabled' , visibleLis).each($.proxy(function(index, element) {\n                    var value = $(element).val();\n                    var option = this.getOptionByValue(value);\n                    $(option).prop('selected', false);\n                }, this));\n            }\n            else {\n                $('input[type=\"checkbox\"]:enabled' , allLis).prop('checked', false);\n                allLis.removeClass(this.options.selectedClass);\n                \n                $('input[type=\"checkbox\"]:enabled' , allLis).each($.proxy(function(index, element) {\n                    var value = $(element).val();\n                    var option = this.getOptionByValue(value);\n                    $(option).prop('selected', false);\n                }, this));\n            }\n            \n            $('li input[value=\"' + this.options.selectAllValue + '\"]').prop('checked', false);\n\n            if (this.options.enableClickableOptGroups && this.options.multiple) {\n                this.updateOptGroups();\n            }\n            console.log('test')\n            if (triggerOnDeselectAll) {\n                console.log('test2')\n                this.options.onDeselectAll();\n            }\n        },\n\n        /**\n         * Rebuild the plugin.\n         * \n         * Rebuilds the dropdown, the filter and the select all option.\n         */\n        rebuild: function() {\n            this.$ul.html('');\n\n            // Important to distinguish between radios and checkboxes.\n            this.options.multiple = this.$select.attr('multiple') === \"multiple\";\n\n            this.buildSelectAll();\n            this.buildDropdownOptions();\n            this.buildFilter();\n\n            this.updateButtonText();\n            this.updateSelectAll(true);\n            \n            if (this.options.enableClickableOptGroups && this.options.multiple) {\n                this.updateOptGroups();\n            }\n            \n            if (this.options.disableIfEmpty && $('option', this.$select).length <= 0) {\n                this.disable();\n            }\n            else {\n                this.enable();\n            }\n            \n            if (this.options.dropRight) {\n                this.$ul.addClass('pull-right');\n            }\n        },\n\n        /**\n         * The provided data will be used to build the dropdown.\n         */\n        dataprovider: function(dataprovider) {\n            \n            var groupCounter = 0;\n            var $select = this.$select.empty();\n            \n            $.each(dataprovider, function (index, option) {\n                var $tag;\n                \n                if ($.isArray(option.children)) { // create optiongroup tag\n                    groupCounter++;\n                    \n                    $tag = $('<optgroup/>').attr({\n                        label: option.label || 'Group ' + groupCounter,\n                        disabled: !!option.disabled\n                    });\n                    \n                    forEach(option.children, function(subOption) { // add children option tags\n                        var attributes = {\n                            value: subOption.value,\n                            label: subOption.label || subOption.value,\n                            title: subOption.title,\n                            selected: !!subOption.selected,\n                            disabled: !!subOption.disabled\n                        };\n                        \n                        //Loop through attributes object and add key-value for each attribute    \n                       for (var key in subOption.attributes) {\n                            attributes['data-' + key] = subOption.attributes[key];\n                       }\n                         //Append original attributes + new data attributes to option       \n                        $tag.append($('<option/>').attr(attributes));\n                    });\n                }\n                else {\n                    \n                    var attributes = {\n                        'value': option.value,\n                        'label': option.label || option.value,\n                        'title': option.title,\n                        'class': option.class,\n                        'selected': !!option.selected,\n                        'disabled': !!option.disabled\n                    };\n                    //Loop through attributes object and add key-value for each attribute    \n                    for (var key in option.attributes) {\n                      attributes['data-' + key] = option.attributes[key];\n                    }\n                    //Append original attributes + new data attributes to option\n                    $tag = $('<option/>').attr(attributes);\n                    \n                    $tag.text(option.label || option.value);\n                }\n                \n                $select.append($tag);\n            });\n            \n            this.rebuild();\n        },\n\n        /**\n         * Enable the multiselect.\n         */\n        enable: function() {\n            this.$select.prop('disabled', false);\n            this.$button.prop('disabled', false)\n                .removeClass('disabled');\n        },\n\n        /**\n         * Disable the multiselect.\n         */\n        disable: function() {\n            this.$select.prop('disabled', true);\n            this.$button.prop('disabled', true)\n                .addClass('disabled');\n        },\n\n        /**\n         * Set the options.\n         *\n         * @param {Array} options\n         */\n        setOptions: function(options) {\n            this.options = this.mergeOptions(options);\n        },\n\n        /**\n         * Merges the given options with the default options.\n         *\n         * @param {Array} options\n         * @returns {Array}\n         */\n        mergeOptions: function(options) {\n            return $.extend(true, {}, this.defaults, this.options, options);\n        },\n\n        /**\n         * Checks whether a select all checkbox is present.\n         *\n         * @returns {Boolean}\n         */\n        hasSelectAll: function() {\n            return $('li.multiselect-all', this.$ul).length > 0;\n        },\n        \n        /**\n         * Update opt groups.\n         */\n        updateOptGroups: function() {\n            var $groups = $('li.multiselect-group', this.$ul)\n            \n            $groups.each(function() {\n                var $options = $(this).nextUntil('li.multiselect-group')\n                    .not('.multiselect-filter-hidden')\n                    .not('.disabled');\n               \n                var checked = true;\n                $options.each(function() {\n                    var $input = $('input', this);\n                    \n                    if (!$input.prop('checked')) {\n                        checked = false;\n                    }\n                });\n                \n                $('input', this).prop('checked', checked);\n            });\n        },\n        \n        /**\n         * Updates the select all checkbox based on the currently displayed and selected checkboxes.\n         */\n        updateSelectAll: function(notTriggerOnSelectAll) {\n            if (this.hasSelectAll()) {\n                var allBoxes = $(\"li:not(.multiselect-item):not(.multiselect-filter-hidden):not(.multiselect-group):not(.disabled) input:enabled\", this.$ul);\n                var allBoxesLength = allBoxes.length;\n                var checkedBoxesLength = allBoxes.filter(\":checked\").length;\n                var selectAllLi  = $(\"li.multiselect-all\", this.$ul);\n                var selectAllInput = selectAllLi.find(\"input\");\n                \n                if (checkedBoxesLength > 0 && checkedBoxesLength === allBoxesLength) {\n                    selectAllInput.prop(\"checked\", true);\n                    selectAllLi.addClass(this.options.selectedClass);\n                    this.options.onSelectAll();\n                }\n                else {\n                    selectAllInput.prop(\"checked\", false);\n                    selectAllLi.removeClass(this.options.selectedClass);\n                    if (checkedBoxesLength === 0) {\n                        if (!notTriggerOnSelectAll) {\n                            this.options.onDeselectAll();\n                        }\n                    }\n                }\n            }\n        },\n\n        /**\n         * Update the button text and its title based on the currently selected options.\n         */\n        updateButtonText: function() {\n            var options = this.getSelected();\n            \n            // First update the displayed button text.\n            if (this.options.enableHTML) {\n                $('.multiselect .multiselect-selected-text', this.$container).html(this.options.buttonText(options, this.$select));\n            }\n            else {\n                $('.multiselect .multiselect-selected-text', this.$container).text(this.options.buttonText(options, this.$select));\n            }\n            \n            // Now update the title attribute of the button.\n            $('.multiselect', this.$container).attr('title', this.options.buttonTitle(options, this.$select));\n        },\n\n        /**\n         * Get all selected options.\n         *\n         * @returns {jQUery}\n         */\n        getSelected: function() {\n            return $('option', this.$select).filter(\":selected\");\n        },\n\n        /**\n         * Gets a select option by its value.\n         *\n         * @param {String} value\n         * @returns {jQuery}\n         */\n        getOptionByValue: function (value) {\n\n            var options = $('option', this.$select);\n            var valueToCompare = value.toString();\n\n            for (var i = 0; i < options.length; i = i + 1) {\n                var option = options[i];\n                if (option.value === valueToCompare) {\n                    return $(option);\n                }\n            }\n        },\n\n        /**\n         * Get the input (radio/checkbox) by its value.\n         *\n         * @param {String} value\n         * @returns {jQuery}\n         */\n        getInputByValue: function (value) {\n\n            var checkboxes = $('li input', this.$ul);\n            var valueToCompare = value.toString();\n\n            for (var i = 0; i < checkboxes.length; i = i + 1) {\n                var checkbox = checkboxes[i];\n                if (checkbox.value === valueToCompare) {\n                    return $(checkbox);\n                }\n            }\n        },\n\n        /**\n         * Used for knockout integration.\n         */\n        updateOriginalOptions: function() {\n            this.originalOptions = this.$select.clone()[0].options;\n        },\n\n        asyncFunction: function(callback, timeout, self) {\n            var args = Array.prototype.slice.call(arguments, 3);\n            return setTimeout(function() {\n                callback.apply(self || window, args);\n            }, timeout);\n        },\n\n        setAllSelectedText: function(allSelectedText) {\n            this.options.allSelectedText = allSelectedText;\n            this.updateButtonText();\n        }\n    };\n\n    $.fn.multiselect = function(option, parameter, extraOptions) {\n        return this.each(function() {\n            var data = $(this).data('multiselect');\n            var options = typeof option === 'object' && option;\n\n            // Initialize the multiselect.\n            if (!data) {\n                data = new Multiselect(this, options);\n                $(this).data('multiselect', data);\n            }\n\n            // Call multiselect method.\n            if (typeof option === 'string') {\n                data[option](parameter, extraOptions);\n                \n                if (option === 'destroy') {\n                    $(this).data('multiselect', false);\n                }\n            }\n        });\n    };\n\n    $.fn.multiselect.Constructor = Multiselect;\n\n    $(function() {\n        $(\"select[data-role=multiselect]\").multiselect();\n    });\n\n}(window.jQuery);\n "
     },
     {
      "name": "resourceType",
      "type": "Label",
      "value": "Javascript"
     }
    ],
    "type": "LayoutResourceCode",
    "typeDesc": "Resource"
   },
   {
    "id": "a64fc4cf-78fd-0734-45b1-99cfa421cbdf",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "name",
      "type": "Id",
      "value": "Styles"
     },
     {
      "name": "resourceCode",
      "type": "Resource",
      "value": ".select2-container {\n    margin: 0px;\n    position: relative;\n\tdisplay: inline-block;\n\tvertical-align: middle;\n\twidth: 184px;\n} \n\n#s2id_autogen5 {\n    margin-top:5px;\n    text-align:center;\n}\n\n#s2id_autogen3 {\n    margin-top:3px;\n    text-align:center;\n}\n\n#select2-results-6 {\n    text-align:center;\n}\n\n#select2-results-4 {\n    text-align:center;\n}\n\n#select2-drop{\n    width:184px !important;\n}\n\nh5, .h5 {\n    font-size: 17px;\n} \n\n.chzn-container-single .chzn-single {\n\twidth: 150px;\n} \n\n.select2-container-multi .select2-choices {\n    height: 145px !important;\n    margin-top: 30px;\n    width: 180px;\n} \n\n#div_filters_establish_select{\n    font-size: 17px;\n} \n\n#div_sel_establish_filter {\n    margin-top: 36px;\n} \n\n#div_input_text {\n    margin-top: 38px;\n} \n\n#div_get_options {\n    margin-top: 35px;\n} \n\n#div_get_options button {\n    width:110px;\n}\n\n#div_confirm_filter button {\n    width:110px;\n} \n\n#render_txt_input_select {\n    width: 220px;\n    float:left;\n}\n\nselect[multiple], select[size] {\n    height: 0;\n\tvisibility: hidden;\n\twidth: 0;\n} \n\n.btn-group {\n    width: 210px !important;\n\tmargin-top: 15px;\n\tfloat: right;\n} \n\n.open > .dropdown-menu {\n    display: block;\n\twidth: 210px !important;\n} "
     },
     {
      "name": "resourceType",
      "type": "Label",
      "value": "Css"
     }
    ],
    "type": "LayoutResourceCode",
    "typeDesc": "Resource"
   },
   {
    "id": "5a563e8a-3191-461d-7209-190fab01696d",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "name",
      "type": "Id",
      "value": "row_header"
     },
     {
      "name": "height",
      "type": "Integer",
      "value": "120"
     },
     {
      "name": "backgroundColor",
      "type": "Color",
      "value": ""
     },
     {
      "name": "roundCorners",
      "type": "RoundCorners",
      "value": ""
     },
     {
      "name": "textAlign",
      "type": "TextAlign",
      "value": ""
     },
     {
      "name": "cssClass",
      "type": "String",
      "value": ""
     }
    ],
    "type": "LayoutRow",
    "typeDesc": "Row"
   },
   {
    "id": "cc0ddd8f-8154-6814-19f0-d1dcc40e1e3f",
    "parent": "5a563e8a-3191-461d-7209-190fab01696d",
    "properties": [
     {
      "name": "name",
      "type": "Id",
      "value": "div_header"
     },
     {
      "name": "bootstrapExtraSmall",
      "type": "String",
      "value": "12"
     },
     {
      "name": "bootstrapSmall",
      "type": "String",
      "value": "12"
     },
     {
      "name": "bootstrapMedium",
      "type": "String",
      "value": "12"
     },
     {
      "name": "bootstrapLarge",
      "type": "String",
      "value": "12"
     },
     {
      "name": "bootstrapCssClass",
      "type": "String",
      "value": ""
     },
     {
      "name": "height",
      "type": "Integer",
      "value": "120"
     },
     {
      "name": "backgroundColor",
      "type": "Color",
      "value": ""
     },
     {
      "name": "roundCorners",
      "type": "RoundCorners",
      "value": ""
     },
     {
      "name": "textAlign",
      "type": "TextAlign",
      "value": ""
     },
     {
      "name": "cssClass",
      "type": "String",
      "value": ""
     }
    ],
    "type": "LayoutBootstrapColumn",
    "typeDesc": "Column"
   },
   {
    "id": "1f14afa7-3c45-6826-d50c-cdf9ffd5aabf",
    "parent": "cc0ddd8f-8154-6814-19f0-d1dcc40e1e3f",
    "properties": [
     {
      "name": "name",
      "type": "Id",
      "value": "html_header"
     },
     {
      "name": "html",
      "type": "Html",
      "value": "<div class=\"page-header\">\n    <h1 align=\"center\">WAQE</h1>\n    <h3 align=\"center\"><b>Filter Selection</b></h3>\n</div> "
     },
     {
      "name": "fontSize",
      "type": "Integer",
      "value": ""
     },
     {
      "name": "color",
      "type": "Color",
      "value": ""
     },
     {
      "name": "cssClass",
      "type": "String",
      "value": ""
     }
    ],
    "type": "LayoutHtml",
    "typeDesc": "Html"
   },
   {
    "id": "d018012f-c9c4-504c-7b5b-b2cc3c75b4b7",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "name",
      "type": "Id",
      "value": "row_filtering"
     },
     {
      "name": "height",
      "type": "Integer",
      "value": "200"
     },
     {
      "name": "backgroundColor",
      "type": "Color",
      "value": ""
     },
     {
      "name": "roundCorners",
      "type": "RoundCorners",
      "value": ""
     },
     {
      "name": "textAlign",
      "type": "TextAlign",
      "value": ""
     },
     {
      "name": "cssClass",
      "type": "String",
      "value": ""
     }
    ],
    "type": "LayoutRow",
    "typeDesc": "Row"
   },
   {
    "id": "9268c2d8-4364-d6e5-aee4-de119c37d8ae",
    "parent": "d018012f-c9c4-504c-7b5b-b2cc3c75b4b7",
    "properties": [
     {
      "name": "name",
      "type": "Id",
      "value": "column_upper_filters"
     },
     {
      "name": "bootstrapExtraSmall",
      "type": "String",
      "value": "12"
     },
     {
      "name": "bootstrapSmall",
      "type": "String",
      "value": "12"
     },
     {
      "name": "bootstrapMedium",
      "type": "String",
      "value": "12"
     },
     {
      "name": "bootstrapLarge",
      "type": "String",
      "value": "12"
     },
     {
      "name": "bootstrapCssClass",
      "type": "String",
      "value": ""
     },
     {
      "name": "height",
      "type": "Integer",
      "value": "120"
     },
     {
      "name": "backgroundColor",
      "type": "Color",
      "value": ""
     },
     {
      "name": "roundCorners",
      "type": "RoundCorners",
      "value": ""
     },
     {
      "name": "textAlign",
      "type": "TextAlign",
      "value": ""
     },
     {
      "name": "cssClass",
      "type": "String",
      "value": ""
     }
    ],
    "type": "LayoutBootstrapColumn",
    "typeDesc": "Column"
   },
   {
    "id": "6241e0e0-e69d-a865-e3d2-7d8675501fe9",
    "parent": "9268c2d8-4364-d6e5-aee4-de119c37d8ae",
    "properties": [
     {
      "name": "name",
      "type": "Id",
      "value": "row_upper_filters"
     },
     {
      "name": "height",
      "type": "Integer",
      "value": "100"
     },
     {
      "name": "backgroundColor",
      "type": "Color",
      "value": ""
     },
     {
      "name": "roundCorners",
      "type": "RoundCorners",
      "value": ""
     },
     {
      "name": "textAlign",
      "type": "TextAlign",
      "value": ""
     },
     {
      "name": "cssClass",
      "type": "String",
      "value": ""
     }
    ],
    "type": "LayoutRow",
    "typeDesc": "Row"
   },
   {
    "id": "8cf96174-1d73-ed6a-40b4-5c4099bc6133",
    "parent": "6241e0e0-e69d-a865-e3d2-7d8675501fe9",
    "properties": [
     {
      "name": "name",
      "type": "Id",
      "value": "div_filter_cat"
     },
     {
      "name": "bootstrapExtraSmall",
      "type": "String",
      "value": "2"
     },
     {
      "name": "bootstrapSmall",
      "type": "String",
      "value": "2"
     },
     {
      "name": "bootstrapMedium",
      "type": "String",
      "value": "2"
     },
     {
      "name": "bootstrapLarge",
      "type": "String",
      "value": "2"
     },
     {
      "name": "bootstrapCssClass",
      "type": "String",
      "value": ""
     },
     {
      "name": "height",
      "type": "Integer",
      "value": "100"
     },
     {
      "name": "backgroundColor",
      "type": "Color",
      "value": ""
     },
     {
      "name": "roundCorners",
      "type": "RoundCorners",
      "value": ""
     },
     {
      "name": "textAlign",
      "type": "TextAlign",
      "value": "center"
     },
     {
      "name": "cssClass",
      "type": "String",
      "value": ""
     }
    ],
    "type": "LayoutBootstrapColumn",
    "typeDesc": "Column"
   },
   {
    "id": "aa9a00bb-2447-cb57-cb93-c15abfdd1b05",
    "parent": "8cf96174-1d73-ed6a-40b4-5c4099bc6133",
    "properties": [
     {
      "name": "name",
      "type": "Id",
      "value": "html_filters_select"
     },
     {
      "name": "html",
      "type": "Html",
      "value": "<div>\n    <h5><b>Filter Category:</b></h5>\n    <div id=\"div_filter_category\">\n    </div>\n</div> "
     },
     {
      "name": "fontSize",
      "type": "Integer",
      "value": ""
     },
     {
      "name": "color",
      "type": "Color",
      "value": ""
     },
     {
      "name": "cssClass",
      "type": "String",
      "value": ""
     }
    ],
    "type": "LayoutHtml",
    "typeDesc": "Html"
   },
   {
    "id": "9fdadbd8-00b4-c6a6-eff0-2a011d7fede7",
    "parent": "6241e0e0-e69d-a865-e3d2-7d8675501fe9",
    "properties": [
     {
      "name": "name",
      "type": "Id",
      "value": "div_filter_onon"
     },
     {
      "name": "bootstrapExtraSmall",
      "type": "String",
      "value": "2"
     },
     {
      "name": "bootstrapSmall",
      "type": "String",
      "value": "2"
     },
     {
      "name": "bootstrapMedium",
      "type": "String",
      "value": "2"
     },
     {
      "name": "bootstrapLarge",
      "type": "String",
      "value": "2"
     },
     {
      "name": "bootstrapCssClass",
      "type": "String",
      "value": ""
     },
     {
      "name": "height",
      "type": "Integer",
      "value": "100"
     },
     {
      "name": "backgroundColor",
      "type": "Color",
      "value": ""
     },
     {
      "name": "roundCorners",
      "type": "RoundCorners",
      "value": ""
     },
     {
      "name": "textAlign",
      "type": "TextAlign",
      "value": "center"
     },
     {
      "name": "cssClass",
      "type": "String",
      "value": ""
     }
    ],
    "type": "LayoutBootstrapColumn",
    "typeDesc": "Column"
   },
   {
    "id": "9d814f41-3512-8b2b-6bde-c012104b3781",
    "parent": "9fdadbd8-00b4-c6a6-eff0-2a011d7fede7",
    "properties": [
     {
      "name": "name",
      "type": "Id",
      "value": "html_filter_on"
     },
     {
      "name": "html",
      "type": "Html",
      "value": "<div>\n    <h5><b>Filter On:</b></h5>\n    <div id=\"div_filter_on\">\n    </div>\n</div> "
     },
     {
      "name": "fontSize",
      "type": "Integer",
      "value": ""
     },
     {
      "name": "color",
      "type": "Color",
      "value": ""
     },
     {
      "name": "cssClass",
      "type": "String",
      "value": ""
     }
    ],
    "type": "LayoutHtml",
    "typeDesc": "Html"
   },
   {
    "id": "212376ee-42e2-da00-f00f-9fe590508010",
    "parent": "6241e0e0-e69d-a865-e3d2-7d8675501fe9",
    "properties": [
     {
      "name": "name",
      "type": "Id",
      "value": "div_sel_establish_filter"
     },
     {
      "name": "bootstrapExtraSmall",
      "type": "String",
      "value": "2"
     },
     {
      "name": "bootstrapSmall",
      "type": "String",
      "value": "2"
     },
     {
      "name": "bootstrapMedium",
      "type": "String",
      "value": "2"
     },
     {
      "name": "bootstrapLarge",
      "type": "String",
      "value": "2"
     },
     {
      "name": "bootstrapCssClass",
      "type": "String",
      "value": ""
     },
     {
      "name": "height",
      "type": "Integer",
      "value": "100"
     },
     {
      "name": "backgroundColor",
      "type": "Color",
      "value": ""
     },
     {
      "name": "roundCorners",
      "type": "RoundCorners",
      "value": ""
     },
     {
      "name": "textAlign",
      "type": "TextAlign",
      "value": "center"
     },
     {
      "name": "cssClass",
      "type": "String",
      "value": ""
     }
    ],
    "type": "LayoutBootstrapColumn",
    "typeDesc": "Column"
   },
   {
    "id": "cffcebe2-8edf-d3c2-6f16-070c92215c2a",
    "parent": "6241e0e0-e69d-a865-e3d2-7d8675501fe9",
    "properties": [
     {
      "name": "name",
      "type": "Id",
      "value": "div_input_text"
     },
     {
      "name": "bootstrapExtraSmall",
      "type": "String",
      "value": "2"
     },
     {
      "name": "bootstrapSmall",
      "type": "String",
      "value": "2"
     },
     {
      "name": "bootstrapMedium",
      "type": "String",
      "value": "2"
     },
     {
      "name": "bootstrapLarge",
      "type": "String",
      "value": "2"
     },
     {
      "name": "bootstrapCssClass",
      "type": "String",
      "value": ""
     },
     {
      "name": "height",
      "type": "Integer",
      "value": "100"
     },
     {
      "name": "backgroundColor",
      "type": "Color",
      "value": ""
     },
     {
      "name": "roundCorners",
      "type": "RoundCorners",
      "value": ""
     },
     {
      "name": "textAlign",
      "type": "TextAlign",
      "value": "center"
     },
     {
      "name": "cssClass",
      "type": "String",
      "value": ""
     }
    ],
    "type": "LayoutBootstrapColumn",
    "typeDesc": "Column"
   },
   {
    "id": "f712a06f-b878-a05a-b91d-9c6bdf8a8996",
    "parent": "6241e0e0-e69d-a865-e3d2-7d8675501fe9",
    "properties": [
     {
      "name": "name",
      "type": "Id",
      "value": "div_get_options"
     },
     {
      "name": "bootstrapExtraSmall",
      "type": "String",
      "value": "2"
     },
     {
      "name": "bootstrapSmall",
      "type": "String",
      "value": "2"
     },
     {
      "name": "bootstrapMedium",
      "type": "String",
      "value": "2"
     },
     {
      "name": "bootstrapLarge",
      "type": "String",
      "value": "2"
     },
     {
      "name": "bootstrapCssClass",
      "type": "String",
      "value": ""
     },
     {
      "name": "height",
      "type": "Integer",
      "value": "100"
     },
     {
      "name": "backgroundColor",
      "type": "Color",
      "value": ""
     },
     {
      "name": "roundCorners",
      "type": "RoundCorners",
      "value": ""
     },
     {
      "name": "textAlign",
      "type": "TextAlign",
      "value": "center"
     },
     {
      "name": "cssClass",
      "type": "String",
      "value": ""
     }
    ],
    "type": "LayoutBootstrapColumn",
    "typeDesc": "Column"
   },
   {
    "id": "4e01224a-b2da-8da7-896c-1229f92df73f",
    "parent": "6241e0e0-e69d-a865-e3d2-7d8675501fe9",
    "properties": [
     {
      "name": "name",
      "type": "Id",
      "value": "div_sel_options"
     },
     {
      "name": "bootstrapExtraSmall",
      "type": "String",
      "value": "2"
     },
     {
      "name": "bootstrapSmall",
      "type": "String",
      "value": "2"
     },
     {
      "name": "bootstrapMedium",
      "type": "String",
      "value": "2"
     },
     {
      "name": "bootstrapLarge",
      "type": "String",
      "value": "2"
     },
     {
      "name": "bootstrapCssClass",
      "type": "String",
      "value": ""
     },
     {
      "name": "height",
      "type": "Integer",
      "value": "100"
     },
     {
      "name": "backgroundColor",
      "type": "Color",
      "value": ""
     },
     {
      "name": "roundCorners",
      "type": "RoundCorners",
      "value": ""
     },
     {
      "name": "textAlign",
      "type": "TextAlign",
      "value": "left"
     },
     {
      "name": "cssClass",
      "type": "String",
      "value": ""
     }
    ],
    "type": "LayoutBootstrapColumn",
    "typeDesc": "Column"
   },
   {
    "id": "c2fe78bc-2316-4301-f13a-36272d440ca8",
    "parent": "d018012f-c9c4-504c-7b5b-b2cc3c75b4b7",
    "properties": [
     {
      "name": "name",
      "type": "Id",
      "value": "column_lower_filters"
     },
     {
      "name": "bootstrapExtraSmall",
      "type": "String",
      "value": "12"
     },
     {
      "name": "bootstrapSmall",
      "type": "String",
      "value": "12"
     },
     {
      "name": "bootstrapMedium",
      "type": "String",
      "value": "12"
     },
     {
      "name": "bootstrapLarge",
      "type": "String",
      "value": "12"
     },
     {
      "name": "bootstrapCssClass",
      "type": "String",
      "value": ""
     },
     {
      "name": "height",
      "type": "Integer",
      "value": "120"
     },
     {
      "name": "backgroundColor",
      "type": "Color",
      "value": ""
     },
     {
      "name": "roundCorners",
      "type": "RoundCorners",
      "value": ""
     },
     {
      "name": "textAlign",
      "type": "TextAlign",
      "value": ""
     },
     {
      "name": "cssClass",
      "type": "String",
      "value": ""
     }
    ],
    "type": "LayoutBootstrapColumn",
    "typeDesc": "Column"
   },
   {
    "id": "31c07b79-0f7e-9631-0183-1c65cbcfc73d",
    "parent": "c2fe78bc-2316-4301-f13a-36272d440ca8",
    "properties": [
     {
      "name": "name",
      "type": "Id",
      "value": "row_lower_filters"
     },
     {
      "name": "height",
      "type": "Integer",
      "value": "100"
     },
     {
      "name": "backgroundColor",
      "type": "Color",
      "value": ""
     },
     {
      "name": "roundCorners",
      "type": "RoundCorners",
      "value": ""
     },
     {
      "name": "textAlign",
      "type": "TextAlign",
      "value": ""
     },
     {
      "name": "cssClass",
      "type": "String",
      "value": ""
     }
    ],
    "type": "LayoutRow",
    "typeDesc": "Row"
   },
   {
    "id": "bd28bbc8-5599-40a6-4783-3612e3b762c1",
    "parent": "31c07b79-0f7e-9631-0183-1c65cbcfc73d",
    "properties": [
     {
      "name": "name",
      "type": "Id",
      "value": "div_filter_type"
     },
     {
      "name": "bootstrapExtraSmall",
      "type": "String",
      "value": "4"
     },
     {
      "name": "bootstrapSmall",
      "type": "String",
      "value": "4"
     },
     {
      "name": "bootstrapMedium",
      "type": "String",
      "value": "4"
     },
     {
      "name": "bootstrapLarge",
      "type": "String",
      "value": "4"
     },
     {
      "name": "bootstrapCssClass",
      "type": "String",
      "value": ""
     },
     {
      "name": "height",
      "type": "Integer",
      "value": "100"
     },
     {
      "name": "backgroundColor",
      "type": "Color",
      "value": ""
     },
     {
      "name": "roundCorners",
      "type": "RoundCorners",
      "value": ""
     },
     {
      "name": "textAlign",
      "type": "TextAlign",
      "value": "right"
     },
     {
      "name": "cssClass",
      "type": "String",
      "value": ""
     }
    ],
    "type": "LayoutBootstrapColumn",
    "typeDesc": "Column"
   },
   {
    "id": "b12cd072-5963-64e3-8b5d-e9158ad36628",
    "parent": "bd28bbc8-5599-40a6-4783-3612e3b762c1",
    "properties": [
     {
      "name": "name",
      "type": "Id",
      "value": "html_filter_type"
     },
     {
      "name": "html",
      "type": "Html",
      "value": "<div>\n    <h5><b>Filter Type: </b></h5>\n</div> "
     },
     {
      "name": "fontSize",
      "type": "Integer",
      "value": ""
     },
     {
      "name": "color",
      "type": "Color",
      "value": ""
     },
     {
      "name": "cssClass",
      "type": "String",
      "value": ""
     }
    ],
    "type": "LayoutHtml",
    "typeDesc": "Html"
   },
   {
    "id": "cfaa561d-15aa-a4a8-2d6e-fa17a0b4b59f",
    "parent": "31c07b79-0f7e-9631-0183-1c65cbcfc73d",
    "properties": [
     {
      "name": "name",
      "type": "Id",
      "value": "div_sel_filter_type"
     },
     {
      "name": "bootstrapExtraSmall",
      "type": "String",
      "value": "2"
     },
     {
      "name": "bootstrapSmall",
      "type": "String",
      "value": "2"
     },
     {
      "name": "bootstrapMedium",
      "type": "String",
      "value": "2"
     },
     {
      "name": "bootstrapLarge",
      "type": "String",
      "value": "2"
     },
     {
      "name": "bootstrapCssClass",
      "type": "String",
      "value": ""
     },
     {
      "name": "height",
      "type": "Integer",
      "value": "100"
     },
     {
      "name": "backgroundColor",
      "type": "Color",
      "value": ""
     },
     {
      "name": "roundCorners",
      "type": "RoundCorners",
      "value": ""
     },
     {
      "name": "textAlign",
      "type": "TextAlign",
      "value": "center"
     },
     {
      "name": "cssClass",
      "type": "String",
      "value": ""
     }
    ],
    "type": "LayoutBootstrapColumn",
    "typeDesc": "Column"
   },
   {
    "id": "1cd75625-9981-ae46-4efa-0b1cf1edaa43",
    "parent": "31c07b79-0f7e-9631-0183-1c65cbcfc73d",
    "properties": [
     {
      "name": "name",
      "type": "Id",
      "value": "div_bellow_txt_empty"
     },
     {
      "name": "bootstrapExtraSmall",
      "type": "String",
      "value": "2"
     },
     {
      "name": "bootstrapSmall",
      "type": "String",
      "value": "2"
     },
     {
      "name": "bootstrapMedium",
      "type": "String",
      "value": "2"
     },
     {
      "name": "bootstrapLarge",
      "type": "String",
      "value": "2"
     },
     {
      "name": "bootstrapCssClass",
      "type": "String",
      "value": ""
     },
     {
      "name": "height",
      "type": "Integer",
      "value": "100"
     },
     {
      "name": "backgroundColor",
      "type": "Color",
      "value": ""
     },
     {
      "name": "roundCorners",
      "type": "RoundCorners",
      "value": ""
     },
     {
      "name": "textAlign",
      "type": "TextAlign",
      "value": ""
     },
     {
      "name": "cssClass",
      "type": "String",
      "value": ""
     }
    ],
    "type": "LayoutBootstrapColumn",
    "typeDesc": "Column"
   },
   {
    "id": "f1694c42-f296-0204-c310-3f7af2cad06e",
    "parent": "31c07b79-0f7e-9631-0183-1c65cbcfc73d",
    "properties": [
     {
      "name": "name",
      "type": "Id",
      "value": "div_confirm_filter"
     },
     {
      "name": "bootstrapExtraSmall",
      "type": "String",
      "value": "2"
     },
     {
      "name": "bootstrapSmall",
      "type": "String",
      "value": "2"
     },
     {
      "name": "bootstrapMedium",
      "type": "String",
      "value": "2"
     },
     {
      "name": "bootstrapLarge",
      "type": "String",
      "value": "2"
     },
     {
      "name": "bootstrapCssClass",
      "type": "String",
      "value": ""
     },
     {
      "name": "height",
      "type": "Integer",
      "value": "100"
     },
     {
      "name": "backgroundColor",
      "type": "Color",
      "value": ""
     },
     {
      "name": "roundCorners",
      "type": "RoundCorners",
      "value": ""
     },
     {
      "name": "textAlign",
      "type": "TextAlign",
      "value": "center"
     },
     {
      "name": "cssClass",
      "type": "String",
      "value": ""
     }
    ],
    "type": "LayoutBootstrapColumn",
    "typeDesc": "Column"
   },
   {
    "id": "27762804-a987-1c99-3c9c-021dd67919a2",
    "parent": "31c07b79-0f7e-9631-0183-1c65cbcfc73d",
    "properties": [
     {
      "name": "name",
      "type": "Id",
      "value": "div_bellow_empty_right"
     },
     {
      "name": "bootstrapExtraSmall",
      "type": "String",
      "value": "2"
     },
     {
      "name": "bootstrapSmall",
      "type": "String",
      "value": "2"
     },
     {
      "name": "bootstrapMedium",
      "type": "String",
      "value": "2"
     },
     {
      "name": "bootstrapLarge",
      "type": "String",
      "value": "2"
     },
     {
      "name": "bootstrapCssClass",
      "type": "String",
      "value": ""
     },
     {
      "name": "height",
      "type": "Integer",
      "value": "100"
     },
     {
      "name": "backgroundColor",
      "type": "Color",
      "value": ""
     },
     {
      "name": "roundCorners",
      "type": "RoundCorners",
      "value": ""
     },
     {
      "name": "textAlign",
      "type": "TextAlign",
      "value": ""
     },
     {
      "name": "cssClass",
      "type": "String",
      "value": ""
     }
    ],
    "type": "LayoutBootstrapColumn",
    "typeDesc": "Column"
   },
   {
    "id": "415656cd-f13a-afb3-6ec9-fa8ddb69ff2c",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "name",
      "type": "Id",
      "value": "row_footer"
     },
     {
      "name": "height",
      "type": "Integer",
      "value": "50"
     },
     {
      "name": "backgroundColor",
      "type": "Color",
      "value": ""
     },
     {
      "name": "roundCorners",
      "type": "RoundCorners",
      "value": ""
     },
     {
      "name": "textAlign",
      "type": "TextAlign",
      "value": ""
     },
     {
      "name": "cssClass",
      "type": "String",
      "value": ""
     }
    ],
    "type": "LayoutRow",
    "typeDesc": "Row"
   },
   {
    "id": "8f5fd2b4-cbad-c129-16cc-64da191c1d01",
    "parent": "415656cd-f13a-afb3-6ec9-fa8ddb69ff2c",
    "properties": [
     {
      "name": "name",
      "type": "Id",
      "value": "column_footer"
     },
     {
      "name": "bootstrapExtraSmall",
      "type": "String",
      "value": "12"
     },
     {
      "name": "bootstrapSmall",
      "type": "String",
      "value": ""
     },
     {
      "name": "bootstrapMedium",
      "type": "String",
      "value": ""
     },
     {
      "name": "bootstrapLarge",
      "type": "String",
      "value": ""
     },
     {
      "name": "bootstrapCssClass",
      "type": "String",
      "value": ""
     },
     {
      "name": "height",
      "type": "Integer",
      "value": "50"
     },
     {
      "name": "backgroundColor",
      "type": "Color",
      "value": ""
     },
     {
      "name": "roundCorners",
      "type": "RoundCorners",
      "value": ""
     },
     {
      "name": "textAlign",
      "type": "TextAlign",
      "value": "center"
     },
     {
      "name": "cssClass",
      "type": "String",
      "value": ""
     }
    ],
    "type": "LayoutBootstrapColumn",
    "typeDesc": "Column"
   },
   {
    "id": "47aa0fa1-aaf4-c40d-c090-14a11727278c",
    "parent": "8f5fd2b4-cbad-c129-16cc-64da191c1d01",
    "properties": [
     {
      "name": "name",
      "type": "Id",
      "value": "html_footer"
     },
     {
      "name": "html",
      "type": "Html",
      "value": "</hr>\n<footer class=\"footer\">\n    <div class=\"container\">\n     <p class=\"text-muted\">Develovep By Jortilles.  <a href=\"http://www.jortilles.com/waqe/\">Know More!</a></p>\n    </div>\n</footer> "
     },
     {
      "name": "fontSize",
      "type": "Integer",
      "value": ""
     },
     {
      "name": "color",
      "type": "Color",
      "value": ""
     },
     {
      "name": "cssClass",
      "type": "String",
      "value": ""
     }
    ],
    "type": "LayoutHtml",
    "typeDesc": "Html"
   }
  ],
  "title": "filter"
 }
}